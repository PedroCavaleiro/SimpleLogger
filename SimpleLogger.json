[{
  "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 7132,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct LogEntry : <Type usr=\"s:s7Codablea\">Codable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 3597
          }
        ],
        "key.bodylength" : 3500,
        "key.bodyoffset" : 3630,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc_comment" : "Log entry model providing comprehensive logging information with source tracking and diagnostic capabilities.\n\n`LogEntry` represents individual log entries with comprehensive diagnostic information including\nmessage content, source code tracking, log level classification, and temporal coordination. It provides\nessential logging capabilities, debugging assistance, and diagnostic coordination for comprehensive\nsystem monitoring and troubleshooting workflows.\n\n## Features\n\n- **Comprehensive Logging**: Complete log entry information with message, level, and source tracking\n- **Source Code Tracking**: File, function, and line number tracking for precise debugging assistance\n- **Object Context**: Optional object name and data for contextual debugging and analysis\n- **Temporal Coordination**: Timestamp tracking for chronological log analysis and monitoring\n- **Level Classification**: Log level categorization for filtering and severity analysis\n- **Diagnostic Support**: Structured logging for development and production troubleshooting\n\n## Usage Context\n\nThis model is used throughout the application for comprehensive logging, debugging assistance,\nand system monitoring. It provides essential diagnostic information for development troubleshooting\nand integrates with logging systems for comprehensive application monitoring and analysis.\n\n## Environment Requirements\n\n- Requires Foundation framework for core data structures and Codable functionality\n- Integrates with Logging system for log level classification and management\n- Compatible with file-based logging systems for log persistence and analysis\n- Supports development and production logging workflows with source tracking\n\n## Properties\n\n- `message`: String containing the primary log message and information content\n- `objectName`: Optional string containing related object name for contextual debugging\n- `objectData`: Optional string containing related object data for diagnostic analysis\n- `level`: LogLevel enumeration providing log severity classification and filtering\n- `isSnapshot`: Defines if the entry is a snapshot, the tool that reads the snapshot displays it differently\n- `file`: String containing source file name for debugging location identification\n- `function`: String containing source function name for debugging context\n- `line`: Integer containing source line number for precise debugging location\n- `timestamp`: Date providing temporal information for chronological log analysis\n\n## Initialization Parameters\n\n- Parameters:\n  - message: String containing the primary log message and diagnostic information\n  - objectName: Optional string containing related object name for contextual analysis\n  - objectData: Optional string containing related object data for debugging assistance\n  - level: LogLevel providing log severity classification and filtering capabilities\n  - isSnapshot: Sets if the file is a snapshot or not\n  - file: String containing source file name for debugging location tracking\n  - function: String containing source function name for debugging context\n  - line: Integer containing source line number for precise location identification\n  - timestamp: Date providing temporal information for chronological coordination",
        "key.doc.column" : 15,
        "key.doc.comment" : "Log entry model providing comprehensive logging information with source tracking and diagnostic capabilities.\n\n`LogEntry` represents individual log entries with comprehensive diagnostic information including\nmessage content, source code tracking, log level classification, and temporal coordination. It provides\nessential logging capabilities, debugging assistance, and diagnostic coordination for comprehensive\nsystem monitoring and troubleshooting workflows.\n\n## Features\n\n- **Comprehensive Logging**: Complete log entry information with message, level, and source tracking\n- **Source Code Tracking**: File, function, and line number tracking for precise debugging assistance\n- **Object Context**: Optional object name and data for contextual debugging and analysis\n- **Temporal Coordination**: Timestamp tracking for chronological log analysis and monitoring\n- **Level Classification**: Log level categorization for filtering and severity analysis\n- **Diagnostic Support**: Structured logging for development and production troubleshooting\n\n## Usage Context\n\nThis model is used throughout the application for comprehensive logging, debugging assistance,\nand system monitoring. It provides essential diagnostic information for development troubleshooting\nand integrates with logging systems for comprehensive application monitoring and analysis.\n\n## Environment Requirements\n\n- Requires Foundation framework for core data structures and Codable functionality\n- Integrates with Logging system for log level classification and management\n- Compatible with file-based logging systems for log persistence and analysis\n- Supports development and production logging workflows with source tracking\n\n## Properties\n\n- `message`: String containing the primary log message and information content\n- `objectName`: Optional string containing related object name for contextual debugging\n- `objectData`: Optional string containing related object data for diagnostic analysis\n- `level`: LogLevel enumeration providing log severity classification and filtering\n- `isSnapshot`: Defines if the entry is a snapshot, the tool that reads the snapshot displays it differently\n- `file`: String containing source file name for debugging location identification\n- `function`: String containing source function name for debugging context\n- `line`: Integer containing source line number for precise debugging location\n- `timestamp`: Date providing temporal information for chronological log analysis\n\n## Initialization Parameters\n\n- Parameters:\n  - message: String containing the primary log message and diagnostic information\n  - objectName: Optional string containing related object name for contextual analysis\n  - objectData: Optional string containing related object data for debugging assistance\n  - level: LogLevel providing log severity classification and filtering capabilities\n  - isSnapshot: Sets if the file is a snapshot or not\n  - file: String containing source file name for debugging location tracking\n  - function: String containing source function name for debugging context\n  - line: Integer containing source line number for precise location identification\n  - timestamp: Date providing temporal information for chronological coordination",
        "key.doc.declaration" : "public struct LogEntry : Codable",
        "key.doc.discussion" : [
          {
            "Para" : "`LogEntry` represents individual log entries with comprehensive diagnostic information including message content, source code tracking, log level classification, and temporal coordination. It provides essential logging capabilities, debugging assistance, and diagnostic coordination for comprehensive system monitoring and troubleshooting workflows."
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "This model is used throughout the application for comprehensive logging, debugging assistance, and system monitoring. It provides essential diagnostic information for development troubleshooting and integrates with logging systems for comprehensive application monitoring and analysis."
          },
          {
            "List-Bullet" : ""
          },
          {
            "List-Bullet" : ""
          }
        ],
        "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"65\" column=\"15\"><Name>LogEntry<\/Name><USR>s:12SimpleLogger8LogEntryV<\/USR><Declaration>public struct LogEntry : Codable<\/Declaration><CommentParts><Abstract><Para>Log entry model providing comprehensive logging information with source tracking and diagnostic capabilities.<\/Para><\/Abstract><Parameters><Parameter><Name>message<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>String containing the primary log message and diagnostic information<\/Para><\/Discussion><\/Parameter><Parameter><Name>objectName<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Optional string containing related object name for contextual analysis<\/Para><\/Discussion><\/Parameter><Parameter><Name>objectData<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Optional string containing related object data for debugging assistance<\/Para><\/Discussion><\/Parameter><Parameter><Name>level<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>LogLevel providing log severity classification and filtering capabilities<\/Para><\/Discussion><\/Parameter><Parameter><Name>isSnapshot<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Sets if the file is a snapshot or not<\/Para><\/Discussion><\/Parameter><Parameter><Name>file<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>String containing source file name for debugging location tracking<\/Para><\/Discussion><\/Parameter><Parameter><Name>function<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>String containing source function name for debugging context<\/Para><\/Discussion><\/Parameter><Parameter><Name>line<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Integer containing source line number for precise location identification<\/Para><\/Discussion><\/Parameter><Parameter><Name>timestamp<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Date providing temporal information for chronological coordination<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para><codeVoice>LogEntry<\/codeVoice> represents individual log entries with comprehensive diagnostic information including message content, source code tracking, log level classification, and temporal coordination. It provides essential logging capabilities, debugging assistance, and diagnostic coordination for comprehensive system monitoring and troubleshooting workflows.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Features<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><bold>Comprehensive Logging<\/bold>: Complete log entry information with message, level, and source tracking<\/Para><\/Item><Item><Para><bold>Source Code Tracking<\/bold>: File, function, and line number tracking for precise debugging assistance<\/Para><\/Item><Item><Para><bold>Object Context<\/bold>: Optional object name and data for contextual debugging and analysis<\/Para><\/Item><Item><Para><bold>Temporal Coordination<\/bold>: Timestamp tracking for chronological log analysis and monitoring<\/Para><\/Item><Item><Para><bold>Level Classification<\/bold>: Log level categorization for filtering and severity analysis<\/Para><\/Item><Item><Para><bold>Diagnostic Support<\/bold>: Structured logging for development and production troubleshooting<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Usage Context<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>This model is used throughout the application for comprehensive logging, debugging assistance, and system monitoring. It provides essential diagnostic information for development troubleshooting and integrates with logging systems for comprehensive application monitoring and analysis.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Environment Requirements<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para>Requires Foundation framework for core data structures and Codable functionality<\/Para><\/Item><Item><Para>Integrates with Logging system for log level classification and management<\/Para><\/Item><Item><Para>Compatible with file-based logging systems for log persistence and analysis<\/Para><\/Item><Item><Para>Supports development and production logging workflows with source tracking<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Properties<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><codeVoice>message<\/codeVoice>: String containing the primary log message and information content<\/Para><\/Item><Item><Para><codeVoice>objectName<\/codeVoice>: Optional string containing related object name for contextual debugging<\/Para><\/Item><Item><Para><codeVoice>objectData<\/codeVoice>: Optional string containing related object data for diagnostic analysis<\/Para><\/Item><Item><Para><codeVoice>level<\/codeVoice>: LogLevel enumeration providing log severity classification and filtering<\/Para><\/Item><Item><Para><codeVoice>isSnapshot<\/codeVoice>: Defines if the entry is a snapshot, the tool that reads the snapshot displays it differently<\/Para><\/Item><Item><Para><codeVoice>file<\/codeVoice>: String containing source file name for debugging location identification<\/Para><\/Item><Item><Para><codeVoice>function<\/codeVoice>: String containing source function name for debugging context<\/Para><\/Item><Item><Para><codeVoice>line<\/codeVoice>: Integer containing source line number for precise debugging location<\/Para><\/Item><Item><Para><codeVoice>timestamp<\/codeVoice>: Date providing temporal information for chronological log analysis<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Initialization Parameters<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 65,
        "key.doc.name" : "LogEntry",
        "key.doc.parameters" : [
          {
            "discussion" : [
              {
                "Para" : "String containing the primary log message and diagnostic information"
              }
            ],
            "name" : "message"
          },
          {
            "discussion" : [
              {
                "Para" : "Optional string containing related object name for contextual analysis"
              }
            ],
            "name" : "objectName"
          },
          {
            "discussion" : [
              {
                "Para" : "Optional string containing related object data for debugging assistance"
              }
            ],
            "name" : "objectData"
          },
          {
            "discussion" : [
              {
                "Para" : "LogLevel providing log severity classification and filtering capabilities"
              }
            ],
            "name" : "level"
          },
          {
            "discussion" : [
              {
                "Para" : "Sets if the file is a snapshot or not"
              }
            ],
            "name" : "isSnapshot"
          },
          {
            "discussion" : [
              {
                "Para" : "String containing source file name for debugging location tracking"
              }
            ],
            "name" : "file"
          },
          {
            "discussion" : [
              {
                "Para" : "String containing source function name for debugging context"
              }
            ],
            "name" : "function"
          },
          {
            "discussion" : [
              {
                "Para" : "Integer containing source line number for precise location identification"
              }
            ],
            "name" : "line"
          },
          {
            "discussion" : [
              {
                "Para" : "Date providing temporal information for chronological coordination"
              }
            ],
            "name" : "timestamp"
          }
        ],
        "key.doc.type" : "Class",
        "key.doclength" : 3435,
        "key.docoffset" : 162,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 7,
            "key.offset" : 3621
          }
        ],
        "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>LogEntry<\/decl.name> : <ref.typealias usr=\"s:s7Codablea\">Codable<\/ref.typealias><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Codable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 3527,
        "key.line" : 65,
        "key.modulename" : "SimpleLogger",
        "key.name" : "LogEntry",
        "key.namelength" : 8,
        "key.nameoffset" : 3611,
        "key.offset" : 3604,
        "key.parsed_declaration" : "public struct LogEntry: Codable",
        "key.parsed_scope.end" : 128,
        "key.parsed_scope.start" : 65,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let message: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3992
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Primary log message providing comprehensive diagnostic information and logging content.\n\nThis string property contains the main log message with diagnostic information, enabling\ncomprehensive logging, troubleshooting assistance, and system monitoring\nfor application debugging and operational analysis workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Primary log message providing comprehensive diagnostic information and logging content.\n\nThis string property contains the main log message with diagnostic information, enabling\ncomprehensive logging, troubleshooting assistance, and system monitoring\nfor application debugging and operational analysis workflows.",
            "key.doc.declaration" : "public let message: String",
            "key.doc.discussion" : [
              {
                "Para" : "This string property contains the main log message with diagnostic information, enabling comprehensive logging, troubleshooting assistance, and system monitoring for application debugging and operational analysis workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"72\" column=\"16\"><Name>message<\/Name><USR>s:12SimpleLogger8LogEntryV7messageSSvp<\/USR><Declaration>public let message: String<\/Declaration><CommentParts><Abstract><Para>Primary log message providing comprehensive diagnostic information and logging content.<\/Para><\/Abstract><Discussion><Para>This string property contains the main log message with diagnostic information, enabling comprehensive logging, troubleshooting assistance, and system monitoring for application debugging and operational analysis workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 72,
            "key.doc.name" : "message",
            "key.doc.type" : "Other",
            "key.doclength" : 348,
            "key.docoffset" : 3640,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>message<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 19,
            "key.line" : 72,
            "key.modulename" : "SimpleLogger",
            "key.name" : "message",
            "key.namelength" : 7,
            "key.nameoffset" : 4003,
            "key.offset" : 3999,
            "key.parsed_declaration" : "public let message: String",
            "key.parsed_scope.end" : 72,
            "key.parsed_scope.start" : 72,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:12SimpleLogger8LogEntryV7messageSSvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var objectName: <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4414
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Optional related object name providing contextual debugging information and object identification.\n\nThis optional string property contains the name of the related object for contextual debugging,\nenabling object-specific analysis, contextual troubleshooting, and enhanced diagnostic\ncoordination for comprehensive logging and debugging workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Optional related object name providing contextual debugging information and object identification.\n\nThis optional string property contains the name of the related object for contextual debugging,\nenabling object-specific analysis, contextual troubleshooting, and enhanced diagnostic\ncoordination for comprehensive logging and debugging workflows.",
            "key.doc.declaration" : "public var objectName: String?",
            "key.doc.discussion" : [
              {
                "Para" : "This optional string property contains the name of the related object for contextual debugging, enabling object-specific analysis, contextual troubleshooting, and enhanced diagnostic coordination for comprehensive logging and debugging workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"79\" column=\"16\"><Name>objectName<\/Name><USR>s:12SimpleLogger8LogEntryV10objectNameSSSgvp<\/USR><Declaration>public var objectName: String?<\/Declaration><CommentParts><Abstract><Para>Optional related object name providing contextual debugging information and object identification.<\/Para><\/Abstract><Discussion><Para>This optional string property contains the name of the related object for contextual debugging, enabling object-specific analysis, contextual troubleshooting, and enhanced diagnostic coordination for comprehensive logging and debugging workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 79,
            "key.doc.name" : "objectName",
            "key.doc.type" : "Other",
            "key.doclength" : 382,
            "key.docoffset" : 4028,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>objectName<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 29,
            "key.line" : 79,
            "key.modulename" : "SimpleLogger",
            "key.name" : "objectName",
            "key.namelength" : 10,
            "key.nameoffset" : 4425,
            "key.offset" : 4421,
            "key.parsed_declaration" : "public var objectName: String? = nil",
            "key.parsed_scope.end" : 79,
            "key.parsed_scope.start" : 79,
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.typename" : "String?",
            "key.typeusr" : "$sSSSgD",
            "key.usr" : "s:12SimpleLogger8LogEntryV10objectNameSSSgvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var objectData: <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4832
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Optional related object data providing detailed diagnostic information and analysis support.\n\nThis optional string property contains related object data for detailed diagnostic analysis,\nenabling data inspection, object state debugging, and comprehensive troubleshooting\nassistance for logging and diagnostic coordination workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Optional related object data providing detailed diagnostic information and analysis support.\n\nThis optional string property contains related object data for detailed diagnostic analysis,\nenabling data inspection, object state debugging, and comprehensive troubleshooting\nassistance for logging and diagnostic coordination workflows.",
            "key.doc.declaration" : "public var objectData: String?",
            "key.doc.discussion" : [
              {
                "Para" : "This optional string property contains related object data for detailed diagnostic analysis, enabling data inspection, object state debugging, and comprehensive troubleshooting assistance for logging and diagnostic coordination workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"86\" column=\"16\"><Name>objectData<\/Name><USR>s:12SimpleLogger8LogEntryV10objectDataSSSgvp<\/USR><Declaration>public var objectData: String?<\/Declaration><CommentParts><Abstract><Para>Optional related object data providing detailed diagnostic information and analysis support.<\/Para><\/Abstract><Discussion><Para>This optional string property contains related object data for detailed diagnostic analysis, enabling data inspection, object state debugging, and comprehensive troubleshooting assistance for logging and diagnostic coordination workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 86,
            "key.doc.name" : "objectData",
            "key.doc.type" : "Other",
            "key.doclength" : 368,
            "key.docoffset" : 4460,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>objectData<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 29,
            "key.line" : 86,
            "key.modulename" : "SimpleLogger",
            "key.name" : "objectData",
            "key.namelength" : 10,
            "key.nameoffset" : 4843,
            "key.offset" : 4839,
            "key.parsed_declaration" : "public var objectData: String? = nil",
            "key.parsed_scope.end" : 86,
            "key.parsed_scope.start" : 86,
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.typename" : "String?",
            "key.typeusr" : "$sSSSgD",
            "key.usr" : "s:12SimpleLogger8LogEntryV10objectDataSSSgvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let level: <Type usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5239
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Log level classification providing severity categorization and filtering capabilities.\n\nThis LogLevel property provides log severity classification and filtering coordination,\nenabling log level management, severity-based analysis, and structured logging\nfor comprehensive system monitoring and troubleshooting workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Log level classification providing severity categorization and filtering capabilities.\n\nThis LogLevel property provides log severity classification and filtering coordination,\nenabling log level management, severity-based analysis, and structured logging\nfor comprehensive system monitoring and troubleshooting workflows.",
            "key.doc.declaration" : "public let level: LogLevel",
            "key.doc.discussion" : [
              {
                "Para" : "This LogLevel property provides log severity classification and filtering coordination, enabling log level management, severity-based analysis, and structured logging for comprehensive system monitoring and troubleshooting workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"93\" column=\"16\"><Name>level<\/Name><USR>s:12SimpleLogger8LogEntryV5levelAA0C5LevelOvp<\/USR><Declaration>public let level: LogLevel<\/Declaration><CommentParts><Abstract><Para>Log level classification providing severity categorization and filtering capabilities.<\/Para><\/Abstract><Discussion><Para>This LogLevel property provides log severity classification and filtering coordination, enabling log level management, severity-based analysis, and structured logging for comprehensive system monitoring and troubleshooting workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 93,
            "key.doc.name" : "level",
            "key.doc.type" : "Other",
            "key.doclength" : 357,
            "key.docoffset" : 4878,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>level<\/decl.name>: <decl.var.type><ref.enum usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/ref.enum><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 19,
            "key.line" : 93,
            "key.modulename" : "SimpleLogger",
            "key.name" : "level",
            "key.namelength" : 5,
            "key.nameoffset" : 5250,
            "key.offset" : 5246,
            "key.parsed_declaration" : "public let level: LogLevel",
            "key.parsed_scope.end" : 93,
            "key.parsed_scope.start" : 93,
            "key.reusingastcontext" : false,
            "key.typename" : "LogLevel",
            "key.typeusr" : "$s12SimpleLogger8LogLevelOD",
            "key.usr" : "s:12SimpleLogger8LogEntryV5levelAA0C5LevelOvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isSnapshot: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5487
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "By default false, sets if this entry is a snapshot from a class\n\nSnapshots represent a codable class instance helpful for debugging classes that hold\nstate across the app lifecycle",
            "key.doc.column" : 16,
            "key.doc.comment" : "By default false, sets if this entry is a snapshot from a class\n\nSnapshots represent a codable class instance helpful for debugging classes that hold\nstate across the app lifecycle",
            "key.doc.declaration" : "public var isSnapshot: Bool",
            "key.doc.discussion" : [
              {
                "Para" : "Snapshots represent a codable class instance helpful for debugging classes that hold state across the app lifecycle"
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"99\" column=\"16\"><Name>isSnapshot<\/Name><USR>s:12SimpleLogger8LogEntryV10isSnapshotSbvp<\/USR><Declaration>public var isSnapshot: Bool<\/Declaration><CommentParts><Abstract><Para>By default false, sets if this entry is a snapshot from a class<\/Para><\/Abstract><Discussion><Para>Snapshots represent a codable class instance helpful for debugging classes that hold state across the app lifecycle<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 99,
            "key.doc.name" : "isSnapshot",
            "key.doc.type" : "Other",
            "key.doclength" : 208,
            "key.docoffset" : 5275,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isSnapshot<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 28,
            "key.line" : 99,
            "key.modulename" : "SimpleLogger",
            "key.name" : "isSnapshot",
            "key.namelength" : 10,
            "key.nameoffset" : 5498,
            "key.offset" : 5494,
            "key.parsed_declaration" : "public var isSnapshot: Bool = false",
            "key.parsed_scope.end" : 99,
            "key.parsed_scope.start" : 99,
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:12SimpleLogger8LogEntryV10isSnapshotSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let file: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5893
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Source file name providing debugging location identification and source code tracking.\n\nThis string property contains the source file name for debugging location tracking,\nenabling precise source identification, code location analysis, and debugging\nassistance for comprehensive troubleshooting and development workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Source file name providing debugging location identification and source code tracking.\n\nThis string property contains the source file name for debugging location tracking,\nenabling precise source identification, code location analysis, and debugging\nassistance for comprehensive troubleshooting and development workflows.",
            "key.doc.declaration" : "public let file: String",
            "key.doc.discussion" : [
              {
                "Para" : "This string property contains the source file name for debugging location tracking, enabling precise source identification, code location analysis, and debugging assistance for comprehensive troubleshooting and development workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"106\" column=\"16\"><Name>file<\/Name><USR>s:12SimpleLogger8LogEntryV4fileSSvp<\/USR><Declaration>public let file: String<\/Declaration><CommentParts><Abstract><Para>Source file name providing debugging location identification and source code tracking.<\/Para><\/Abstract><Discussion><Para>This string property contains the source file name for debugging location tracking, enabling precise source identification, code location analysis, and debugging assistance for comprehensive troubleshooting and development workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 106,
            "key.doc.name" : "file",
            "key.doc.type" : "Other",
            "key.doclength" : 357,
            "key.docoffset" : 5532,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>file<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 16,
            "key.line" : 106,
            "key.modulename" : "SimpleLogger",
            "key.name" : "file",
            "key.namelength" : 4,
            "key.nameoffset" : 5904,
            "key.offset" : 5900,
            "key.parsed_declaration" : "public let file: String",
            "key.parsed_scope.end" : 106,
            "key.parsed_scope.start" : 106,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:12SimpleLogger8LogEntryV4fileSSvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let function: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6300
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Source function name providing debugging context and execution location identification.\n\nThis string property contains the source function name for debugging context tracking,\nenabling function-specific analysis, execution context identification, and debugging\ncoordination for comprehensive troubleshooting and development workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Source function name providing debugging context and execution location identification.\n\nThis string property contains the source function name for debugging context tracking,\nenabling function-specific analysis, execution context identification, and debugging\ncoordination for comprehensive troubleshooting and development workflows.",
            "key.doc.declaration" : "public let function: String",
            "key.doc.discussion" : [
              {
                "Para" : "This string property contains the source function name for debugging context tracking, enabling function-specific analysis, execution context identification, and debugging coordination for comprehensive troubleshooting and development workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"113\" column=\"16\"><Name>function<\/Name><USR>s:12SimpleLogger8LogEntryV8functionSSvp<\/USR><Declaration>public let function: String<\/Declaration><CommentParts><Abstract><Para>Source function name providing debugging context and execution location identification.<\/Para><\/Abstract><Discussion><Para>This string property contains the source function name for debugging context tracking, enabling function-specific analysis, execution context identification, and debugging coordination for comprehensive troubleshooting and development workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 113,
            "key.doc.name" : "function",
            "key.doc.type" : "Other",
            "key.doclength" : 370,
            "key.docoffset" : 5926,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>function<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 20,
            "key.line" : 113,
            "key.modulename" : "SimpleLogger",
            "key.name" : "function",
            "key.namelength" : 8,
            "key.nameoffset" : 6311,
            "key.offset" : 6307,
            "key.parsed_declaration" : "public let function: String",
            "key.parsed_scope.end" : 113,
            "key.parsed_scope.start" : 113,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:12SimpleLogger8LogEntryV8functionSSvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let line: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6724
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Source line number providing precise debugging location and code position identification.\n\nThis integer property contains the exact source line number for precise debugging location,\nenabling exact code position identification, detailed source tracking, and precise\ndebugging assistance for comprehensive troubleshooting and development workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Source line number providing precise debugging location and code position identification.\n\nThis integer property contains the exact source line number for precise debugging location,\nenabling exact code position identification, detailed source tracking, and precise\ndebugging assistance for comprehensive troubleshooting and development workflows.",
            "key.doc.declaration" : "public let line: Int",
            "key.doc.discussion" : [
              {
                "Para" : "This integer property contains the exact source line number for precise debugging location, enabling exact code position identification, detailed source tracking, and precise debugging assistance for comprehensive troubleshooting and development workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"120\" column=\"16\"><Name>line<\/Name><USR>s:12SimpleLogger8LogEntryV4lineSivp<\/USR><Declaration>public let line: Int<\/Declaration><CommentParts><Abstract><Para>Source line number providing precise debugging location and code position identification.<\/Para><\/Abstract><Discussion><Para>This integer property contains the exact source line number for precise debugging location, enabling exact code position identification, detailed source tracking, and precise debugging assistance for comprehensive troubleshooting and development workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 120,
            "key.doc.name" : "line",
            "key.doc.type" : "Other",
            "key.doclength" : 383,
            "key.docoffset" : 6337,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>line<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 13,
            "key.line" : 120,
            "key.modulename" : "SimpleLogger",
            "key.name" : "line",
            "key.namelength" : 4,
            "key.nameoffset" : 6735,
            "key.offset" : 6731,
            "key.parsed_declaration" : "public let line: Int",
            "key.parsed_scope.end" : 120,
            "key.parsed_scope.start" : 120,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:12SimpleLogger8LogEntryV4lineSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let timestamp: <Type usr=\"s:10Foundation4DateV\">Date<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 7103
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Temporal timestamp providing chronological coordination and log timing information.\n\nThis Date property provides temporal information for chronological log analysis,\nenabling time-based log coordination, temporal debugging, and chronological\nmonitoring for comprehensive logging and system analysis workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Temporal timestamp providing chronological coordination and log timing information.\n\nThis Date property provides temporal information for chronological log analysis,\nenabling time-based log coordination, temporal debugging, and chronological\nmonitoring for comprehensive logging and system analysis workflows.",
            "key.doc.declaration" : "public let timestamp: Date",
            "key.doc.discussion" : [
              {
                "Para" : "This Date property provides temporal information for chronological log analysis, enabling time-based log coordination, temporal debugging, and chronological monitoring for comprehensive logging and system analysis workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift\" line=\"127\" column=\"16\"><Name>timestamp<\/Name><USR>s:12SimpleLogger8LogEntryV9timestamp10Foundation4DateVvp<\/USR><Declaration>public let timestamp: Date<\/Declaration><CommentParts><Abstract><Para>Temporal timestamp providing chronological coordination and log timing information.<\/Para><\/Abstract><Discussion><Para>This Date property provides temporal information for chronological log analysis, enabling time-based log coordination, temporal debugging, and chronological monitoring for comprehensive logging and system analysis workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 127,
            "key.doc.name" : "timestamp",
            "key.doc.type" : "Other",
            "key.doclength" : 345,
            "key.docoffset" : 6754,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+Entry.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>timestamp<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 19,
            "key.line" : 127,
            "key.modulename" : "SimpleLogger",
            "key.name" : "timestamp",
            "key.namelength" : 9,
            "key.nameoffset" : 7114,
            "key.offset" : 7110,
            "key.parsed_declaration" : "public let timestamp: Date",
            "key.parsed_scope.end" : 127,
            "key.parsed_scope.start" : 127,
            "key.reusingastcontext" : false,
            "key.typename" : "Date",
            "key.typeusr" : "$s10Foundation4DateVD",
            "key.usr" : "s:12SimpleLogger8LogEntryV9timestamp10Foundation4DateVvp"
          }
        ],
        "key.typename" : "LogEntry.Type",
        "key.typeusr" : "$s12SimpleLogger8LogEntryVmD",
        "key.usr" : "s:12SimpleLogger8LogEntryV"
      }
    ]
  }
}, {
  "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 4250,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct LogFileSummary<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 2640
          }
        ],
        "key.bodylength" : 1578,
        "key.bodyoffset" : 2670,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc_comment" : "Log file summary model providing comprehensive log file analysis and statistical information.\n\n`LogFileSummary` represents comprehensive log file metadata with statistical analysis, file\ninformation, and log level distribution tracking. It provides essential log file management,\nanalysis capabilities, and monitoring coordination for comprehensive logging system administration\nand log file analysis workflows.\n\n## Features\n\n- **File Metadata**: Complete file information including name, size, and modification tracking\n- **Statistical Analysis**: Log level distribution and count analysis for log file insights\n- **File Management**: Log file organization and metadata tracking for administration\n- **Analysis Coordination**: Log file analysis capabilities and statistical monitoring\n- **System Monitoring**: Log file health monitoring and analysis coordination\n- **Administrative Support**: Log file management and analysis for system administration\n\n## Usage Context\n\nThis model is used throughout the application for log file management, analysis coordination,\nand logging system administration. It provides essential log file metadata for monitoring\ninterfaces and integrates with logging systems for comprehensive log file analysis and management.\n\n## Environment Requirements\n\n- Requires Foundation framework for core data structures and file system integration\n- Integrates with Logging system for log level classification and analysis\n- Compatible with file system APIs for file metadata and size tracking\n- Supports log file analysis and administrative management workflows\n\n## Properties\n\n- `fileName`: String containing log file name for identification and management\n- `size`: Integer containing log file size in bytes for file management analysis\n- `lastModified`: Date containing file modification timestamp for tracking coordination\n- `levelCounts`: Dictionary containing log level distribution for statistical analysis\n\n## Initialization Parameters\n\n- Parameter fileName: String containing log file name for identification and management\n- Parameter size: Integer containing log file size in bytes for file analysis\n- Parameter lastModified: Date containing file modification timestamp for tracking\n- Parameter levelCounts: Dictionary containing log level distribution for statistical coordination",
        "key.doc.column" : 15,
        "key.doc.comment" : "Log file summary model providing comprehensive log file analysis and statistical information.\n\n`LogFileSummary` represents comprehensive log file metadata with statistical analysis, file\ninformation, and log level distribution tracking. It provides essential log file management,\nanalysis capabilities, and monitoring coordination for comprehensive logging system administration\nand log file analysis workflows.\n\n## Features\n\n- **File Metadata**: Complete file information including name, size, and modification tracking\n- **Statistical Analysis**: Log level distribution and count analysis for log file insights\n- **File Management**: Log file organization and metadata tracking for administration\n- **Analysis Coordination**: Log file analysis capabilities and statistical monitoring\n- **System Monitoring**: Log file health monitoring and analysis coordination\n- **Administrative Support**: Log file management and analysis for system administration\n\n## Usage Context\n\nThis model is used throughout the application for log file management, analysis coordination,\nand logging system administration. It provides essential log file metadata for monitoring\ninterfaces and integrates with logging systems for comprehensive log file analysis and management.\n\n## Environment Requirements\n\n- Requires Foundation framework for core data structures and file system integration\n- Integrates with Logging system for log level classification and analysis\n- Compatible with file system APIs for file metadata and size tracking\n- Supports log file analysis and administrative management workflows\n\n## Properties\n\n- `fileName`: String containing log file name for identification and management\n- `size`: Integer containing log file size in bytes for file management analysis\n- `lastModified`: Date containing file modification timestamp for tracking coordination\n- `levelCounts`: Dictionary containing log level distribution for statistical analysis\n\n## Initialization Parameters\n\n- Parameter fileName: String containing log file name for identification and management\n- Parameter size: Integer containing log file size in bytes for file analysis\n- Parameter lastModified: Date containing file modification timestamp for tracking\n- Parameter levelCounts: Dictionary containing log level distribution for statistical coordination",
        "key.doc.declaration" : "public struct LogFileSummary",
        "key.doc.discussion" : [
          {
            "Para" : "`LogFileSummary` represents comprehensive log file metadata with statistical analysis, file information, and log level distribution tracking. It provides essential log file management, analysis capabilities, and monitoring coordination for comprehensive logging system administration and log file analysis workflows."
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "This model is used throughout the application for log file management, analysis coordination, and logging system administration. It provides essential log file metadata for monitoring interfaces and integrates with logging systems for comprehensive log file analysis and management."
          },
          {
            "List-Bullet" : ""
          },
          {
            "List-Bullet" : ""
          }
        ],
        "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift\" line=\"54\" column=\"15\"><Name>LogFileSummary<\/Name><USR>s:12SimpleLogger14LogFileSummaryV<\/USR><Declaration>public struct LogFileSummary<\/Declaration><CommentParts><Abstract><Para>Log file summary model providing comprehensive log file analysis and statistical information.<\/Para><\/Abstract><Parameters><Parameter><Name>fileName<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>String containing log file name for identification and management<\/Para><\/Discussion><\/Parameter><Parameter><Name>size<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Integer containing log file size in bytes for file analysis<\/Para><\/Discussion><\/Parameter><Parameter><Name>lastModified<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Date containing file modification timestamp for tracking<\/Para><\/Discussion><\/Parameter><Parameter><Name>levelCounts<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Dictionary containing log level distribution for statistical coordination<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para><codeVoice>LogFileSummary<\/codeVoice> represents comprehensive log file metadata with statistical analysis, file information, and log level distribution tracking. It provides essential log file management, analysis capabilities, and monitoring coordination for comprehensive logging system administration and log file analysis workflows.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Features<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><bold>File Metadata<\/bold>: Complete file information including name, size, and modification tracking<\/Para><\/Item><Item><Para><bold>Statistical Analysis<\/bold>: Log level distribution and count analysis for log file insights<\/Para><\/Item><Item><Para><bold>File Management<\/bold>: Log file organization and metadata tracking for administration<\/Para><\/Item><Item><Para><bold>Analysis Coordination<\/bold>: Log file analysis capabilities and statistical monitoring<\/Para><\/Item><Item><Para><bold>System Monitoring<\/bold>: Log file health monitoring and analysis coordination<\/Para><\/Item><Item><Para><bold>Administrative Support<\/bold>: Log file management and analysis for system administration<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Usage Context<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>This model is used throughout the application for log file management, analysis coordination, and logging system administration. It provides essential log file metadata for monitoring interfaces and integrates with logging systems for comprehensive log file analysis and management.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Environment Requirements<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para>Requires Foundation framework for core data structures and file system integration<\/Para><\/Item><Item><Para>Integrates with Logging system for log level classification and analysis<\/Para><\/Item><Item><Para>Compatible with file system APIs for file metadata and size tracking<\/Para><\/Item><Item><Para>Supports log file analysis and administrative management workflows<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Properties<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><codeVoice>fileName<\/codeVoice>: String containing log file name for identification and management<\/Para><\/Item><Item><Para><codeVoice>size<\/codeVoice>: Integer containing log file size in bytes for file management analysis<\/Para><\/Item><Item><Para><codeVoice>lastModified<\/codeVoice>: Date containing file modification timestamp for tracking coordination<\/Para><\/Item><Item><Para><codeVoice>levelCounts<\/codeVoice>: Dictionary containing log level distribution for statistical analysis<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Initialization Parameters<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 54,
        "key.doc.name" : "LogFileSummary",
        "key.doc.parameters" : [
          {
            "discussion" : [
              {
                "Para" : "String containing log file name for identification and management"
              }
            ],
            "name" : "fileName"
          },
          {
            "discussion" : [
              {
                "Para" : "Integer containing log file size in bytes for file analysis"
              }
            ],
            "name" : "size"
          },
          {
            "discussion" : [
              {
                "Para" : "Date containing file modification timestamp for tracking"
              }
            ],
            "name" : "lastModified"
          },
          {
            "discussion" : [
              {
                "Para" : "Dictionary containing log level distribution for statistical coordination"
              }
            ],
            "name" : "levelCounts"
          }
        ],
        "key.doc.type" : "Class",
        "key.doclength" : 2473,
        "key.docoffset" : 167,
        "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>LogFileSummary<\/decl.name><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 1602,
        "key.line" : 54,
        "key.modulename" : "SimpleLogger",
        "key.name" : "LogFileSummary",
        "key.namelength" : 14,
        "key.nameoffset" : 2654,
        "key.offset" : 2647,
        "key.parsed_declaration" : "public struct LogFileSummary",
        "key.parsed_scope.end" : 83,
        "key.parsed_scope.start" : 54,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let fileName: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3019
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Log file name providing identification and file management coordination.\n\nThis string property contains the log file name for file identification, enabling\nlog file management, organization, and administrative coordination\nfor comprehensive logging system administration and file tracking workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Log file name providing identification and file management coordination.\n\nThis string property contains the log file name for file identification, enabling\nlog file management, organization, and administrative coordination\nfor comprehensive logging system administration and file tracking workflows.",
            "key.doc.declaration" : "public let fileName: String",
            "key.doc.discussion" : [
              {
                "Para" : "This string property contains the log file name for file identification, enabling log file management, organization, and administrative coordination for comprehensive logging system administration and file tracking workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift\" line=\"61\" column=\"16\"><Name>fileName<\/Name><USR>s:12SimpleLogger14LogFileSummaryV8fileNameSSvp<\/USR><Declaration>public let fileName: String<\/Declaration><CommentParts><Abstract><Para>Log file name providing identification and file management coordination.<\/Para><\/Abstract><Discussion><Para>This string property contains the log file name for file identification, enabling log file management, organization, and administrative coordination for comprehensive logging system administration and file tracking workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 61,
            "key.doc.name" : "fileName",
            "key.doc.type" : "Other",
            "key.doclength" : 335,
            "key.docoffset" : 2680,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileName<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 20,
            "key.line" : 61,
            "key.modulename" : "SimpleLogger",
            "key.name" : "fileName",
            "key.namelength" : 8,
            "key.nameoffset" : 3030,
            "key.offset" : 3026,
            "key.parsed_declaration" : "public let fileName: String",
            "key.parsed_scope.end" : 61,
            "key.parsed_scope.start" : 61,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:12SimpleLogger14LogFileSummaryV8fileNameSSvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let size: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3415
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Log file size providing file management analysis and storage coordination.\n\nThis integer property contains the log file size in bytes for file management analysis,\nenabling storage monitoring, file size tracking, and administrative coordination\nfor comprehensive log file management and system administration workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Log file size providing file management analysis and storage coordination.\n\nThis integer property contains the log file size in bytes for file management analysis,\nenabling storage monitoring, file size tracking, and administrative coordination\nfor comprehensive log file management and system administration workflows.",
            "key.doc.declaration" : "public let size: Int",
            "key.doc.discussion" : [
              {
                "Para" : "This integer property contains the log file size in bytes for file management analysis, enabling storage monitoring, file size tracking, and administrative coordination for comprehensive log file management and system administration workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift\" line=\"68\" column=\"16\"><Name>size<\/Name><USR>s:12SimpleLogger14LogFileSummaryV4sizeSivp<\/USR><Declaration>public let size: Int<\/Declaration><CommentParts><Abstract><Para>Log file size providing file management analysis and storage coordination.<\/Para><\/Abstract><Discussion><Para>This integer property contains the log file size in bytes for file management analysis, enabling storage monitoring, file size tracking, and administrative coordination for comprehensive log file management and system administration workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 68,
            "key.doc.name" : "size",
            "key.doc.type" : "Other",
            "key.doclength" : 355,
            "key.docoffset" : 3056,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>size<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 13,
            "key.line" : 68,
            "key.modulename" : "SimpleLogger",
            "key.name" : "size",
            "key.namelength" : 4,
            "key.nameoffset" : 3426,
            "key.offset" : 3422,
            "key.parsed_declaration" : "public let size: Int",
            "key.parsed_scope.end" : 68,
            "key.parsed_scope.start" : 68,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:12SimpleLogger14LogFileSummaryV4sizeSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let lastModified: <Type usr=\"s:10Foundation4DateV\">Date<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3801
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "File modification timestamp providing file tracking and temporal coordination.\n\nThis Date property contains the last modification timestamp for file tracking,\nenabling temporal coordination, modification monitoring, and file management\nanalysis for comprehensive logging system administration and tracking workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "File modification timestamp providing file tracking and temporal coordination.\n\nThis Date property contains the last modification timestamp for file tracking,\nenabling temporal coordination, modification monitoring, and file management\nanalysis for comprehensive logging system administration and tracking workflows.",
            "key.doc.declaration" : "public let lastModified: Date",
            "key.doc.discussion" : [
              {
                "Para" : "This Date property contains the last modification timestamp for file tracking, enabling temporal coordination, modification monitoring, and file management analysis for comprehensive logging system administration and tracking workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift\" line=\"75\" column=\"16\"><Name>lastModified<\/Name><USR>s:12SimpleLogger14LogFileSummaryV12lastModified10Foundation4DateVvp<\/USR><Declaration>public let lastModified: Date<\/Declaration><CommentParts><Abstract><Para>File modification timestamp providing file tracking and temporal coordination.<\/Para><\/Abstract><Discussion><Para>This Date property contains the last modification timestamp for file tracking, enabling temporal coordination, modification monitoring, and file management analysis for comprehensive logging system administration and tracking workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 75,
            "key.doc.name" : "lastModified",
            "key.doc.type" : "Other",
            "key.doclength" : 352,
            "key.docoffset" : 3445,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>lastModified<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 22,
            "key.line" : 75,
            "key.modulename" : "SimpleLogger",
            "key.name" : "lastModified",
            "key.namelength" : 12,
            "key.nameoffset" : 3812,
            "key.offset" : 3808,
            "key.parsed_declaration" : "public let lastModified: Date",
            "key.parsed_scope.end" : 75,
            "key.parsed_scope.start" : 75,
            "key.reusingastcontext" : false,
            "key.typename" : "Date",
            "key.typeusr" : "$s10Foundation4DateVD",
            "key.usr" : "s:12SimpleLogger14LogFileSummaryV12lastModified10Foundation4DateVvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let levelCounts: [<Type usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/Type> : <Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4208
              }
            ],
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Log level distribution providing statistical analysis and log file insights.\n\nThis dictionary property contains log level counts for statistical analysis and insights,\nenabling log level distribution tracking, analysis coordination, and log file\nmonitoring for comprehensive logging system analysis and administrative workflows.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Log level distribution providing statistical analysis and log file insights.\n\nThis dictionary property contains log level counts for statistical analysis and insights,\nenabling log level distribution tracking, analysis coordination, and log file\nmonitoring for comprehensive logging system analysis and administrative workflows.",
            "key.doc.declaration" : "public let levelCounts: [LogLevel : Int]",
            "key.doc.discussion" : [
              {
                "Para" : "This dictionary property contains log level counts for statistical analysis and insights, enabling log level distribution tracking, analysis coordination, and log file monitoring for comprehensive logging system analysis and administrative workflows."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift\" line=\"82\" column=\"16\"><Name>levelCounts<\/Name><USR>s:12SimpleLogger14LogFileSummaryV11levelCountsSDyAA0C5LevelOSiGvp<\/USR><Declaration>public let levelCounts: [LogLevel : Int]<\/Declaration><CommentParts><Abstract><Para>Log level distribution providing statistical analysis and log file insights.<\/Para><\/Abstract><Discussion><Para>This dictionary property contains log level counts for statistical analysis and insights, enabling log level distribution tracking, analysis coordination, and log file monitoring for comprehensive logging system analysis and administrative workflows.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 82,
            "key.doc.name" : "levelCounts",
            "key.doc.type" : "Other",
            "key.doclength" : 364,
            "key.docoffset" : 3840,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+FileSummary.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>levelCounts<\/decl.name>: <decl.var.type>[<ref.enum usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/ref.enum> : <ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 32,
            "key.line" : 82,
            "key.modulename" : "SimpleLogger",
            "key.name" : "levelCounts",
            "key.namelength" : 11,
            "key.nameoffset" : 4219,
            "key.offset" : 4215,
            "key.parsed_declaration" : "public let levelCounts: [LogLevel: Int]",
            "key.parsed_scope.end" : 82,
            "key.parsed_scope.start" : 82,
            "key.reusingastcontext" : false,
            "key.typename" : "[LogLevel : Int]",
            "key.typeusr" : "$sSDy12SimpleLogger8LogLevelOSiGD",
            "key.usr" : "s:12SimpleLogger14LogFileSummaryV11levelCountsSDyAA0C5LevelOSiGvp"
          }
        ],
        "key.typename" : "LogFileSummary.Type",
        "key.typeusr" : "$s12SimpleLogger14LogFileSummaryVmD",
        "key.usr" : "s:12SimpleLogger14LogFileSummaryV"
      }
    ]
  }
}, {
  "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1517,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum LogLevel : <Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:s7Codablea\">Codable<\/Type>, <Type usr=\"s:s12CaseIterableP\">CaseIterable<\/Type>, <Type usr=\"s:s12IdentifiableP\">Identifiable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 846
          }
        ],
        "key.bodylength" : 602,
        "key.bodyoffset" : 913,
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.doc_comment" : "Enumeration defining log severity levels for message categorization.\n\nProvides hierarchical logging levels to enable appropriate filtering, display,\nand processing of log messages based on their importance and context.\n\n## Log Levels\n- **debug**: Detailed information for development and troubleshooting\n- **info**: General informational messages about application flow\n- **warning**: Potentially harmful situations that don't prevent operation\n- **error**: Error conditions that may affect functionality\n- **critical**: Severe errors that may cause application failure\n\nEach level represents increasing severity and importance for system monitoring.",
        "key.doc.column" : 13,
        "key.doc.comment" : "Enumeration defining log severity levels for message categorization.\n\nProvides hierarchical logging levels to enable appropriate filtering, display,\nand processing of log messages based on their importance and context.\n\n## Log Levels\n- **debug**: Detailed information for development and troubleshooting\n- **info**: General informational messages about application flow\n- **warning**: Potentially harmful situations that don't prevent operation\n- **error**: Error conditions that may affect functionality\n- **critical**: Severe errors that may cause application failure\n\nEach level represents increasing severity and importance for system monitoring.",
        "key.doc.declaration" : "public enum LogLevel : String, Codable, CaseIterable, Identifiable",
        "key.doc.discussion" : [
          {
            "Para" : "Provides hierarchical logging levels to enable appropriate filtering, display, and processing of log messages based on their importance and context."
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Each level represents increasing severity and importance for system monitoring."
          }
        ],
        "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"23\" column=\"13\"><Name>LogLevel<\/Name><USR>s:12SimpleLogger8LogLevelO<\/USR><Declaration>public enum LogLevel : String, Codable, CaseIterable, Identifiable<\/Declaration><CommentParts><Abstract><Para>Enumeration defining log severity levels for message categorization.<\/Para><\/Abstract><Discussion><Para>Provides hierarchical logging levels to enable appropriate filtering, display, and processing of log messages based on their importance and context.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Log Levels<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><bold>debug<\/bold>: Detailed information for development and troubleshooting<\/Para><\/Item><Item><Para><bold>info<\/bold>: General informational messages about application flow<\/Para><\/Item><Item><Para><bold>warning<\/bold>: Potentially harmful situations that don’t prevent operation<\/Para><\/Item><Item><Para><bold>error<\/bold>: Error conditions that may affect functionality<\/Para><\/Item><Item><Para><bold>critical<\/bold>: Severe errors that may cause application failure<\/Para><\/Item><\/List-Bullet><Para>Each level represents increasing severity and importance for system monitoring.<\/Para><\/Discussion><\/CommentParts><\/Other>",
        "key.doc.line" : 23,
        "key.doc.name" : "LogLevel",
        "key.doc.type" : "Other",
        "key.doclength" : 700,
        "key.docoffset" : 146,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 6,
            "key.offset" : 868
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 7,
            "key.offset" : 876
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 12,
            "key.offset" : 885
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 12,
            "key.offset" : 899
          }
        ],
        "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>LogLevel<\/decl.name> : <ref.struct usr=\"s:SS\">String<\/ref.struct>, <ref.typealias usr=\"s:s7Codablea\">Codable<\/ref.typealias>, <ref.protocol usr=\"s:s12CaseIterableP\">CaseIterable<\/ref.protocol>, <ref.protocol usr=\"s:s12IdentifiableP\">Identifiable<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "String"
          },
          {
            "key.name" : "Codable"
          },
          {
            "key.name" : "CaseIterable"
          },
          {
            "key.name" : "Identifiable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 663,
        "key.line" : 23,
        "key.modulename" : "SimpleLogger",
        "key.name" : "LogLevel",
        "key.namelength" : 8,
        "key.nameoffset" : 858,
        "key.offset" : 853,
        "key.parsed_declaration" : "public enum LogLevel: String, Codable, CaseIterable, Identifiable",
        "key.parsed_scope.end" : 37,
        "key.parsed_scope.start" : 23,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 20,
            "key.offset" : 996,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case debug = &quot;DEBUG&quot;<\/Declaration>",
                "key.column" : 10,
                "key.decl_lang" : "source.lang.swift",
                "key.doc_comment" : "Debug level for detailed development and troubleshooting information.",
                "key.doc.column" : 10,
                "key.doc.comment" : "Debug level for detailed development and troubleshooting information.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"25\" column=\"10\"><Name>debug<\/Name><USR>s:12SimpleLogger8LogLevelO5debugyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Debug level for detailed development and troubleshooting information.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 25,
                "key.doc.name" : "debug",
                "key.doc.type" : "Other",
                "key.doclength" : 74,
                "key.docoffset" : 918,
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.init_expr",
                    "key.length" : 7,
                    "key.offset" : 1009
                  }
                ],
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>debug<\/decl.name> = <syntaxtype.string>&quot;DEBUG&quot;<\/syntaxtype.string><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 15,
                "key.line" : 25,
                "key.modulename" : "SimpleLogger",
                "key.name" : "debug",
                "key.namelength" : 5,
                "key.nameoffset" : 1001,
                "key.offset" : 1001,
                "key.parsed_declaration" : "case debug = \"DEBUG\"",
                "key.parsed_scope.end" : 25,
                "key.parsed_scope.start" : 25,
                "key.reusingastcontext" : false,
                "key.typename" : "(LogLevel.Type) -> LogLevel",
                "key.typeusr" : "$sy12SimpleLogger8LogLevelOACmcD",
                "key.usr" : "s:12SimpleLogger8LogLevelO5debugyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 18,
            "key.offset" : 1088,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case info = &quot;INFO&quot;<\/Declaration>",
                "key.column" : 10,
                "key.decl_lang" : "source.lang.swift",
                "key.doc_comment" : "Informational level for general application flow messages.",
                "key.doc.column" : 10,
                "key.doc.comment" : "Informational level for general application flow messages.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"27\" column=\"10\"><Name>info<\/Name><USR>s:12SimpleLogger8LogLevelO4infoyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Informational level for general application flow messages.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 27,
                "key.doc.name" : "info",
                "key.doc.type" : "Other",
                "key.doclength" : 63,
                "key.docoffset" : 1021,
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.init_expr",
                    "key.length" : 6,
                    "key.offset" : 1100
                  }
                ],
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>info<\/decl.name> = <syntaxtype.string>&quot;INFO&quot;<\/syntaxtype.string><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 13,
                "key.line" : 27,
                "key.modulename" : "SimpleLogger",
                "key.name" : "info",
                "key.namelength" : 4,
                "key.nameoffset" : 1093,
                "key.offset" : 1093,
                "key.parsed_declaration" : "case info = \"INFO\"",
                "key.parsed_scope.end" : 27,
                "key.parsed_scope.start" : 27,
                "key.reusingastcontext" : false,
                "key.typename" : "(LogLevel.Type) -> LogLevel",
                "key.typeusr" : "$sy12SimpleLogger8LogLevelOACmcD",
                "key.usr" : "s:12SimpleLogger8LogLevelO4infoyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 24,
            "key.offset" : 1169,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case warning = &quot;WARNING&quot;<\/Declaration>",
                "key.column" : 10,
                "key.decl_lang" : "source.lang.swift",
                "key.doc_comment" : "Warning level for potentially harmful situations.",
                "key.doc.column" : 10,
                "key.doc.comment" : "Warning level for potentially harmful situations.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"29\" column=\"10\"><Name>warning<\/Name><USR>s:12SimpleLogger8LogLevelO7warningyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Warning level for potentially harmful situations.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 29,
                "key.doc.name" : "warning",
                "key.doc.type" : "Other",
                "key.doclength" : 54,
                "key.docoffset" : 1111,
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.init_expr",
                    "key.length" : 9,
                    "key.offset" : 1184
                  }
                ],
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>warning<\/decl.name> = <syntaxtype.string>&quot;WARNING&quot;<\/syntaxtype.string><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 19,
                "key.line" : 29,
                "key.modulename" : "SimpleLogger",
                "key.name" : "warning",
                "key.namelength" : 7,
                "key.nameoffset" : 1174,
                "key.offset" : 1174,
                "key.parsed_declaration" : "case warning = \"WARNING\"",
                "key.parsed_scope.end" : 29,
                "key.parsed_scope.start" : 29,
                "key.reusingastcontext" : false,
                "key.typename" : "(LogLevel.Type) -> LogLevel",
                "key.typeusr" : "$sy12SimpleLogger8LogLevelOACmcD",
                "key.usr" : "s:12SimpleLogger8LogLevelO7warningyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 20,
            "key.offset" : 1264,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case error = &quot;ERROR&quot;<\/Declaration>",
                "key.column" : 10,
                "key.decl_lang" : "source.lang.swift",
                "key.doc_comment" : "Error level for error conditions affecting functionality.",
                "key.doc.column" : 10,
                "key.doc.comment" : "Error level for error conditions affecting functionality.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"31\" column=\"10\"><Name>error<\/Name><USR>s:12SimpleLogger8LogLevelO5erroryA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Error level for error conditions affecting functionality.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 31,
                "key.doc.name" : "error",
                "key.doc.type" : "Other",
                "key.doclength" : 62,
                "key.docoffset" : 1198,
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.init_expr",
                    "key.length" : 7,
                    "key.offset" : 1277
                  }
                ],
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>error<\/decl.name> = <syntaxtype.string>&quot;ERROR&quot;<\/syntaxtype.string><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 15,
                "key.line" : 31,
                "key.modulename" : "SimpleLogger",
                "key.name" : "error",
                "key.namelength" : 5,
                "key.nameoffset" : 1269,
                "key.offset" : 1269,
                "key.parsed_declaration" : "case error = \"ERROR\"",
                "key.parsed_scope.end" : 31,
                "key.parsed_scope.start" : 31,
                "key.reusingastcontext" : false,
                "key.typename" : "(LogLevel.Type) -> LogLevel",
                "key.typeusr" : "$sy12SimpleLogger8LogLevelOACmcD",
                "key.usr" : "s:12SimpleLogger8LogLevelO5erroryA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 26,
            "key.offset" : 1366,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case critical = &quot;CRITICAL&quot;<\/Declaration>",
                "key.column" : 10,
                "key.decl_lang" : "source.lang.swift",
                "key.doc_comment" : "Critical level for severe errors that may cause application failure.",
                "key.doc.column" : 10,
                "key.doc.comment" : "Critical level for severe errors that may cause application failure.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"33\" column=\"10\"><Name>critical<\/Name><USR>s:12SimpleLogger8LogLevelO8criticalyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Critical level for severe errors that may cause application failure.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 33,
                "key.doc.name" : "critical",
                "key.doc.type" : "Other",
                "key.doclength" : 73,
                "key.docoffset" : 1289,
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.init_expr",
                    "key.length" : 10,
                    "key.offset" : 1382
                  }
                ],
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>critical<\/decl.name> = <syntaxtype.string>&quot;CRITICAL&quot;<\/syntaxtype.string><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 21,
                "key.line" : 33,
                "key.modulename" : "SimpleLogger",
                "key.name" : "critical",
                "key.namelength" : 8,
                "key.nameoffset" : 1371,
                "key.offset" : 1371,
                "key.parsed_declaration" : "case critical = \"CRITICAL\"",
                "key.parsed_scope.end" : 33,
                "key.parsed_scope.start" : 33,
                "key.reusingastcontext" : false,
                "key.typename" : "(LogLevel.Type) -> LogLevel",
                "key.typeusr" : "$sy12SimpleLogger8LogLevelOACmcD",
                "key.usr" : "s:12SimpleLogger8LogLevelO8criticalyA2CmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var id: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1475
              }
            ],
            "key.bodylength" : 15,
            "key.bodyoffset" : 1498,
            "key.column" : 16,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Unique identifier for the log level, using the raw string value.",
            "key.doc.column" : 16,
            "key.doc.comment" : "Unique identifier for the log level, using the raw string value.",
            "key.doc.declaration" : "public var id: String { get }",
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift\" line=\"36\" column=\"16\"><Name>id<\/Name><USR>s:12SimpleLogger8LogLevelO2idSSvp<\/USR><Declaration>public var id: String { get }<\/Declaration><CommentParts><Abstract><Para>Unique identifier for the log level, using the raw string value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 36,
            "key.doc.name" : "id",
            "key.doc.type" : "Other",
            "key.doclength" : 69,
            "key.docoffset" : 1402,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger+LogLevel.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>id<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 32,
            "key.line" : 36,
            "key.modulename" : "SimpleLogger",
            "key.name" : "id",
            "key.namelength" : 2,
            "key.nameoffset" : 1486,
            "key.offset" : 1482,
            "key.overrides" : [
              {
                "key.usr" : "s:s12IdentifiableP2id2IDQzvp"
              }
            ],
            "key.parsed_declaration" : "public var id: String",
            "key.parsed_scope.end" : 36,
            "key.parsed_scope.start" : 36,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:12SimpleLogger8LogLevelO2idSSvp"
          }
        ],
        "key.typename" : "LogLevel.Type",
        "key.typeusr" : "$s12SimpleLogger8LogLevelOmD",
        "key.usr" : "s:12SimpleLogger8LogLevelO"
      }
    ]
  }
}, {
  "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 26560,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
        "key.annotated_decl" : "<Declaration>fileprivate typealias Logger = <Type usr=\"s:12SimpleLoggerAAC\">SimpleLogger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.fileprivate",
            "key.length" : 11,
            "key.offset" : 170
          }
        ],
        "key.column" : 23,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Logger<\/decl.name> = <ref.class usr=\"s:12SimpleLoggerAAC\">SimpleLogger<\/ref.class><\/decl.typealias>",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 31,
        "key.line" : 13,
        "key.modulename" : "SimpleLogger",
        "key.name" : "Logger",
        "key.namelength" : 6,
        "key.nameoffset" : 192,
        "key.offset" : 182,
        "key.parsed_declaration" : "fileprivate typealias Logger = SimpleLogger",
        "key.parsed_scope.end" : 13,
        "key.parsed_scope.start" : 13,
        "key.reusingastcontext" : false,
        "key.typename" : "SimpleLogger.Type",
        "key.typeusr" : "$s12SimpleLoggerAACmD",
        "key.usr" : "s:12SimpleLogger0B033_61A698F9C262E84479D734AD422F70E3LLa"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public class SimpleLogger<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 2210
          },
          {
            "key.attribute" : "source.decl.attribute._custom",
            "key.length" : 10,
            "key.offset" : 2199
          }
        ],
        "key.bodylength" : 24321,
        "key.bodyoffset" : 2237,
        "key.column" : 14,
        "key.decl_lang" : "source.lang.swift",
        "key.doc_comment" : "A comprehensive logging utility for application-wide log collection, persistence, and analysis.\n\nThe `SimpleLogger` type provides a centralized, static logging system with file-based persistence,\ncategorized severity levels, and robust log management capabilities. It supports structured\nlogging with contextual information, automatic file organization, and performance-optimized storage.\n\nThe name can be simplified by declaring a type alias such as `typealias Logger = SimpleLogger`\n\n## Features\n- **Structured Logging**: Captures context including file, function, and line number automatically\n- **Severity Levels**: Five-tier logging levels from debug to critical for proper categorization\n- **File Persistence**: JSON-based storage with automatic file management and size limits\n- **Log Analysis**: Statistical summaries and level-based counting for log files\n- **Memory Management**: Automatic log rotation when files exceed size thresholds\n- **Environment Snapshots**: Capability to capture complete application state for debugging\n\n## Usage Context\nThis utility is used throughout the application for debugging, error tracking, performance monitoring,\nand compliance logging. It provides developers with detailed execution traces and administrators\nwith comprehensive audit trails.\n\n## Environment Requirements\n- **Foundation Framework**: Uses FileManager for document directory access and file operations\n- **Document Directory**: Requires write access to the application's document directory\n- **JSON Encoding**: Depends on Codable protocol for log entry serialization\n- **Main Actor**: All operations are main-actor isolated for thread safety\n\n- Note: Log files are automatically managed with size limits to prevent excessive storage usage.\n- Important: All methods are static; no singleton instance is required. Call directly via `SimpleLogger.methodName(...)`.",
        "key.doc.column" : 14,
        "key.doc.comment" : "A comprehensive logging utility for application-wide log collection, persistence, and analysis.\n\nThe `SimpleLogger` type provides a centralized, static logging system with file-based persistence,\ncategorized severity levels, and robust log management capabilities. It supports structured\nlogging with contextual information, automatic file organization, and performance-optimized storage.\n\nThe name can be simplified by declaring a type alias such as `typealias Logger = SimpleLogger`\n\n## Features\n- **Structured Logging**: Captures context including file, function, and line number automatically\n- **Severity Levels**: Five-tier logging levels from debug to critical for proper categorization\n- **File Persistence**: JSON-based storage with automatic file management and size limits\n- **Log Analysis**: Statistical summaries and level-based counting for log files\n- **Memory Management**: Automatic log rotation when files exceed size thresholds\n- **Environment Snapshots**: Capability to capture complete application state for debugging\n\n## Usage Context\nThis utility is used throughout the application for debugging, error tracking, performance monitoring,\nand compliance logging. It provides developers with detailed execution traces and administrators\nwith comprehensive audit trails.\n\n## Environment Requirements\n- **Foundation Framework**: Uses FileManager for document directory access and file operations\n- **Document Directory**: Requires write access to the application's document directory\n- **JSON Encoding**: Depends on Codable protocol for log entry serialization\n- **Main Actor**: All operations are main-actor isolated for thread safety\n\n- Note: Log files are automatically managed with size limits to prevent excessive storage usage.\n- Important: All methods are static; no singleton instance is required. Call directly via `SimpleLogger.methodName(...)`.",
        "key.doc.declaration" : "@MainActor public class SimpleLogger",
        "key.doc.discussion" : [
          {
            "Para" : "The `SimpleLogger` type provides a centralized, static logging system with file-based persistence, categorized severity levels, and robust log management capabilities. It supports structured logging with contextual information, automatic file organization, and performance-optimized storage."
          },
          {
            "Para" : "The name can be simplified by declaring a type alias such as `typealias Logger = SimpleLogger`"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "This utility is used throughout the application for debugging, error tracking, performance monitoring, and compliance logging. It provides developers with detailed execution traces and administrators with comprehensive audit trails."
          },
          {
            "Note" : ""
          },
          {
            "Important" : ""
          },
          {
            "List-Bullet" : ""
          }
        ],
        "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"45\" column=\"14\"><Name>SimpleLogger<\/Name><USR>s:12SimpleLoggerAAC<\/USR><Declaration>@MainActor public class SimpleLogger<\/Declaration><CommentParts><Abstract><Para>A comprehensive logging utility for application-wide log collection, persistence, and analysis.<\/Para><\/Abstract><Discussion><Para>The <codeVoice>SimpleLogger<\/codeVoice> type provides a centralized, static logging system with file-based persistence, categorized severity levels, and robust log management capabilities. It supports structured logging with contextual information, automatic file organization, and performance-optimized storage.<\/Para><Para>The name can be simplified by declaring a type alias such as <codeVoice>typealias Logger = SimpleLogger<\/codeVoice><\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Features<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><bold>Structured Logging<\/bold>: Captures context including file, function, and line number automatically<\/Para><\/Item><Item><Para><bold>Severity Levels<\/bold>: Five-tier logging levels from debug to critical for proper categorization<\/Para><\/Item><Item><Para><bold>File Persistence<\/bold>: JSON-based storage with automatic file management and size limits<\/Para><\/Item><Item><Para><bold>Log Analysis<\/bold>: Statistical summaries and level-based counting for log files<\/Para><\/Item><Item><Para><bold>Memory Management<\/bold>: Automatic log rotation when files exceed size thresholds<\/Para><\/Item><Item><Para><bold>Environment Snapshots<\/bold>: Capability to capture complete application state for debugging<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Usage Context<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>This utility is used throughout the application for debugging, error tracking, performance monitoring, and compliance logging. It provides developers with detailed execution traces and administrators with comprehensive audit trails.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Environment Requirements<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Note><Para>Log files are automatically managed with size limits to prevent excessive storage usage.<\/Para><\/Note><Important><Para>All methods are static; no singleton instance is required. Call directly via <codeVoice>SimpleLogger.methodName(...)<\/codeVoice>.<\/Para><\/Important><List-Bullet><Item><Para><bold>Foundation Framework<\/bold>: Uses FileManager for document directory access and file operations<\/Para><\/Item><Item><Para><bold>Document Directory<\/bold>: Requires write access to the application’s document directory<\/Para><\/Item><Item><Para><bold>JSON Encoding<\/bold>: Depends on Codable protocol for log entry serialization<\/Para><\/Item><Item><Para><bold>Main Actor<\/bold>: All operations are main-actor isolated for thread safety<\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 45,
        "key.doc.name" : "SimpleLogger",
        "key.doc.type" : "Class",
        "key.doclength" : 1984,
        "key.docoffset" : 215,
        "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>SimpleLogger<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 24342,
        "key.line" : 45,
        "key.modulename" : "SimpleLogger",
        "key.name" : "SimpleLogger",
        "key.namelength" : 12,
        "key.nameoffset" : 2223,
        "key.offset" : 2217,
        "key.parsed_declaration" : "public class SimpleLogger",
        "key.parsed_scope.end" : 521,
        "key.parsed_scope.start" : 45,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 18,
            "key.name" : "MARK: - Properties",
            "key.offset" : 2246
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> private static let loggingDirectoryName: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 2525
              }
            ],
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "The directory name used for storing log files within the document directory.\n\nAll log files are organized within this subdirectory to maintain clean separation\nfrom other application data and enable easy log management.",
            "key.doc.column" : 24,
            "key.doc.comment" : "The directory name used for storing log files within the document directory.\n\nAll log files are organized within this subdirectory to maintain clean separation\nfrom other application data and enable easy log management.",
            "key.doc.declaration" : "@MainActor private static let loggingDirectoryName: String",
            "key.doc.discussion" : [
              {
                "Para" : "All log files are organized within this subdirectory to maintain clean separation from other application data and enable easy log management."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"53\" column=\"24\"><Name>loggingDirectoryName<\/Name><USR>s:12SimpleLoggerAAC20loggingDirectoryName33_61A698F9C262E84479D734AD422F70E3LLSSvpZ<\/USR><Declaration>@MainActor private static let loggingDirectoryName: String<\/Declaration><CommentParts><Abstract><Para>The directory name used for storing log files within the document directory.<\/Para><\/Abstract><Discussion><Para>All log files are organized within this subdirectory to maintain clean separation from other application data and enable easy log management.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 53,
            "key.doc.name" : "loggingDirectoryName",
            "key.doc.type" : "Other",
            "key.doclength" : 247,
            "key.docoffset" : 2274,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>loggingDirectoryName<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 43,
            "key.line" : 53,
            "key.modulename" : "SimpleLogger",
            "key.name" : "loggingDirectoryName",
            "key.namelength" : 20,
            "key.nameoffset" : 2544,
            "key.offset" : 2533,
            "key.parsed_declaration" : "private static let loggingDirectoryName = \"logging\"",
            "key.parsed_scope.end" : 53,
            "key.parsed_scope.start" : 53,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:12SimpleLoggerAAC20loggingDirectoryName33_61A698F9C262E84479D734AD422F70E3LLSSvpZ"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 23,
            "key.name" : "MARK: - Reading Methods",
            "key.offset" : 2585
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func listLogFiles() -&gt; [<Type usr=\"s:12SimpleLogger14LogFileSummaryV\">LogFileSummary<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3669
              }
            ],
            "key.bodylength" : 1683,
            "key.bodyoffset" : 3724,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Lists all log files with comprehensive metadata and statistical analysis.\n\nScans the logging directory and generates detailed summaries for each log file,\nincluding file size, modification timestamps, and categorized entry counts by severity level.\nThis method provides administrators and developers with overview information for log management.\n\nThe analysis process includes:\n1. **Directory Scanning**: Enumerates all JSON files in the logging directory\n2. **Metadata Extraction**: Retrieves file size and last modification date\n3. **Content Analysis**: Parses log entries and counts occurrences by severity level\n4. **Summary Generation**: Creates structured summaries with all relevant information\n\n- Returns: Array of `LogFileSummary` objects containing file metadata and statistics,\n          or empty array if logging directory is inaccessible\n\n- Note: Only processes files with `.json` extension to avoid non-log files",
            "key.doc.column" : 24,
            "key.doc.comment" : "Lists all log files with comprehensive metadata and statistical analysis.\n\nScans the logging directory and generates detailed summaries for each log file,\nincluding file size, modification timestamps, and categorized entry counts by severity level.\nThis method provides administrators and developers with overview information for log management.\n\nThe analysis process includes:\n1. **Directory Scanning**: Enumerates all JSON files in the logging directory\n2. **Metadata Extraction**: Retrieves file size and last modification date\n3. **Content Analysis**: Parses log entries and counts occurrences by severity level\n4. **Summary Generation**: Creates structured summaries with all relevant information\n\n- Returns: Array of `LogFileSummary` objects containing file metadata and statistics,\n          or empty array if logging directory is inaccessible\n\n- Note: Only processes files with `.json` extension to avoid non-log files",
            "key.doc.declaration" : "@MainActor public static func listLogFiles() -> [LogFileSummary]",
            "key.doc.discussion" : [
              {
                "Para" : "Scans the logging directory and generates detailed summaries for each log file, including file size, modification timestamps, and categorized entry counts by severity level. This method provides administrators and developers with overview information for log management."
              },
              {
                "Para" : "The analysis process includes:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"73\" column=\"24\"><Name>listLogFiles()<\/Name><USR>s:12SimpleLoggerAAC12listLogFilesSayAA0D11FileSummaryVGyFZ<\/USR><Declaration>@MainActor public static func listLogFiles() -&gt; [LogFileSummary]<\/Declaration><CommentParts><Abstract><Para>Lists all log files with comprehensive metadata and statistical analysis.<\/Para><\/Abstract><ResultDiscussion><Para>Array of <codeVoice>LogFileSummary<\/codeVoice> objects containing file metadata and statistics, or empty array if logging directory is inaccessible<\/Para><\/ResultDiscussion><Discussion><Para>Scans the logging directory and generates detailed summaries for each log file, including file size, modification timestamps, and categorized entry counts by severity level. This method provides administrators and developers with overview information for log management.<\/Para><Para>The analysis process includes:<\/Para><List-Number><Item><Para><bold>Directory Scanning<\/bold>: Enumerates all JSON files in the logging directory<\/Para><\/Item><Item><Para><bold>Metadata Extraction<\/bold>: Retrieves file size and last modification date<\/Para><\/Item><Item><Para><bold>Content Analysis<\/bold>: Parses log entries and counts occurrences by severity level<\/Para><\/Item><Item><Para><bold>Summary Generation<\/bold>: Creates structured summaries with all relevant information<\/Para><\/Item><\/List-Number><Note><Para>Only processes files with <codeVoice>.json<\/codeVoice> extension to avoid non-log files<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 73,
            "key.doc.name" : "listLogFiles()",
            "key.doc.result_discussion" : [
              {
                "Para" : "Array of `LogFileSummary` objects containing file metadata and statistics, or empty array if logging directory is inaccessible"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1047,
            "key.docoffset" : 2618,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>listLogFiles<\/decl.name>() -&gt; <decl.function.returntype>[<ref.struct usr=\"s:12SimpleLogger14LogFileSummaryV\">LogFileSummary<\/ref.struct>]<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 1732,
            "key.line" : 73,
            "key.modulename" : "SimpleLogger",
            "key.name" : "listLogFiles()",
            "key.namelength" : 14,
            "key.nameoffset" : 3688,
            "key.offset" : 3676,
            "key.parsed_declaration" : "public static func listLogFiles() -> [LogFileSummary]",
            "key.parsed_scope.end" : 106,
            "key.parsed_scope.start" : 73,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 74,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 3737,
                "key.offset" : 3733,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 74,
                "key.parsed_scope.start" : 74,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC12listLogFilesSayAA0D11FileSummaryVGyFZ11fileManagerL_So06NSFileI0Cvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let dirURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dirURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 70,
                "key.line" : 78,
                "key.modulename" : "SimpleLogger",
                "key.name" : "dirURL",
                "key.namelength" : 6,
                "key.nameoffset" : 3919,
                "key.offset" : 3915,
                "key.parsed_declaration" : "let dirURL = docsURL.appendingPathComponent(Self.loggingDirectoryName)",
                "key.parsed_scope.end" : 78,
                "key.parsed_scope.start" : 78,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC12listLogFilesSayAA0D11FileSummaryVGyFZ6dirURLL_10Foundation0I0Vvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var summaries: [<Type usr=\"s:12SimpleLogger14LogFileSummaryV\">LogFileSummary<\/Type>]<\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>summaries<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:12SimpleLogger14LogFileSummaryV\">LogFileSummary<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 36,
                "key.line" : 82,
                "key.modulename" : "SimpleLogger",
                "key.name" : "summaries",
                "key.namelength" : 9,
                "key.nameoffset" : 4198,
                "key.offset" : 4194,
                "key.parsed_declaration" : "var summaries: [LogFileSummary] = []",
                "key.parsed_scope.end" : 82,
                "key.parsed_scope.start" : 82,
                "key.reusingastcontext" : false,
                "key.typename" : "[LogFileSummary]",
                "key.typeusr" : "$sSay12SimpleLogger14LogFileSummaryVGD",
                "key.usr" : "s:12SimpleLoggerAAC12listLogFilesSayAA0D11FileSummaryVGyFZ9summariesL_AFvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> () -> [LogFileSummary]",
            "key.typeusr" : "$sSay12SimpleLogger14LogFileSummaryVGycD",
            "key.usr" : "s:12SimpleLoggerAAC12listLogFilesSayAA0D11FileSummaryVGyFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func logFileStats() -&gt; (fileCount: <Type usr=\"s:Si\">Int<\/Type>, totalSize: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6419
              }
            ],
            "key.bodylength" : 832,
            "key.bodyoffset" : 6490,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Calculates aggregate statistics for all log files in the logging directory.\n\nProvides quick overview metrics for log file management, including total file count\nand cumulative storage usage. This information is useful for monitoring storage consumption\nand determining when log cleanup operations may be necessary.\n\nThe calculation process:\n1. **Directory Access**: Locates and accesses the logging directory\n2. **File Enumeration**: Counts only JSON log files, excluding other file types\n3. **Size Aggregation**: Sums individual file sizes for total storage usage\n4. **Error Handling**: Gracefully handles inaccessible files or directories\n\n- Returns: A tuple containing:\n  - `fileCount`: Number of log files in the directory\n  - `totalSize`: Combined size of all log files in bytes\n\nReturns `(0, 0)` if the logging directory is inaccessible or contains no log files.",
            "key.doc.column" : 24,
            "key.doc.comment" : "Calculates aggregate statistics for all log files in the logging directory.\n\nProvides quick overview metrics for log file management, including total file count\nand cumulative storage usage. This information is useful for monitoring storage consumption\nand determining when log cleanup operations may be necessary.\n\nThe calculation process:\n1. **Directory Access**: Locates and accesses the logging directory\n2. **File Enumeration**: Counts only JSON log files, excluding other file types\n3. **Size Aggregation**: Sums individual file sizes for total storage usage\n4. **Error Handling**: Gracefully handles inaccessible files or directories\n\n- Returns: A tuple containing:\n  - `fileCount`: Number of log files in the directory\n  - `totalSize`: Combined size of all log files in bytes\n\nReturns `(0, 0)` if the logging directory is inaccessible or contains no log files.",
            "key.doc.declaration" : "@MainActor public static func logFileStats() -> (fileCount: Int, totalSize: Int)",
            "key.doc.discussion" : [
              {
                "Para" : "Provides quick overview metrics for log file management, including total file count and cumulative storage usage. This information is useful for monitoring storage consumption and determining when log cleanup operations may be necessary."
              },
              {
                "Para" : "The calculation process:"
              },
              {
                "List-Number" : ""
              },
              {
                "Para" : "Returns `(0, 0)` if the logging directory is inaccessible or contains no log files."
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"125\" column=\"24\"><Name>logFileStats()<\/Name><USR>s:12SimpleLoggerAAC12logFileStatsSi9fileCount_Si9totalSizetyFZ<\/USR><Declaration>@MainActor public static func logFileStats() -&gt; (fileCount: Int, totalSize: Int)<\/Declaration><CommentParts><Abstract><Para>Calculates aggregate statistics for all log files in the logging directory.<\/Para><\/Abstract><ResultDiscussion><Para>A tuple containing:<\/Para><List-Bullet><Item><Para><codeVoice>fileCount<\/codeVoice>: Number of log files in the directory<\/Para><\/Item><Item><Para><codeVoice>totalSize<\/codeVoice>: Combined size of all log files in bytes<\/Para><\/Item><\/List-Bullet><\/ResultDiscussion><Discussion><Para>Provides quick overview metrics for log file management, including total file count and cumulative storage usage. This information is useful for monitoring storage consumption and determining when log cleanup operations may be necessary.<\/Para><Para>The calculation process:<\/Para><List-Number><Item><Para><bold>Directory Access<\/bold>: Locates and accesses the logging directory<\/Para><\/Item><Item><Para><bold>File Enumeration<\/bold>: Counts only JSON log files, excluding other file types<\/Para><\/Item><Item><Para><bold>Size Aggregation<\/bold>: Sums individual file sizes for total storage usage<\/Para><\/Item><Item><Para><bold>Error Handling<\/bold>: Gracefully handles inaccessible files or directories<\/Para><\/Item><\/List-Number><Para>Returns <codeVoice>(0, 0)<\/codeVoice> if the logging directory is inaccessible or contains no log files.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 125,
            "key.doc.name" : "logFileStats()",
            "key.doc.result_discussion" : [
              {
                "Para" : "A tuple containing:"
              },
              {
                "List-Bullet" : ""
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 997,
            "key.docoffset" : 5418,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>logFileStats<\/decl.name>() -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.argument_label>fileCount<\/tuple.element.argument_label>: <tuple.element.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>totalSize<\/tuple.element.argument_label>: <tuple.element.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 897,
            "key.line" : 125,
            "key.modulename" : "SimpleLogger",
            "key.name" : "logFileStats()",
            "key.namelength" : 14,
            "key.nameoffset" : 6438,
            "key.offset" : 6426,
            "key.parsed_declaration" : "public static func logFileStats() -> (fileCount: Int, totalSize: Int)",
            "key.parsed_scope.end" : 144,
            "key.parsed_scope.start" : 125,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 126,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 6503,
                "key.offset" : 6499,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 126,
                "key.parsed_scope.start" : 126,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC12logFileStatsSi9fileCount_Si9totalSizetyFZ0F7ManagerL_So06NSFileJ0Cvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let dirURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dirURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 70,
                "key.line" : 130,
                "key.modulename" : "SimpleLogger",
                "key.name" : "dirURL",
                "key.namelength" : 6,
                "key.nameoffset" : 6689,
                "key.offset" : 6685,
                "key.parsed_declaration" : "let dirURL = docsURL.appendingPathComponent(Self.loggingDirectoryName)",
                "key.parsed_scope.end" : 130,
                "key.parsed_scope.start" : 130,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC12logFileStatsSi9fileCount_Si9totalSizetyFZ6dirURLL_10Foundation0K0Vvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var fileCount: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>fileCount<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 17,
                "key.line" : 134,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileCount",
                "key.namelength" : 9,
                "key.nameoffset" : 6943,
                "key.offset" : 6939,
                "key.parsed_declaration" : "var fileCount = 0",
                "key.parsed_scope.end" : 134,
                "key.parsed_scope.start" : 134,
                "key.reusingastcontext" : false,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:12SimpleLoggerAAC12logFileStatsSi9fileCount_Si9totalSizetyFZADL_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>var totalSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>totalSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 17,
                "key.line" : 135,
                "key.modulename" : "SimpleLogger",
                "key.name" : "totalSize",
                "key.namelength" : 9,
                "key.nameoffset" : 6969,
                "key.offset" : 6965,
                "key.parsed_declaration" : "var totalSize = 0",
                "key.parsed_scope.end" : 135,
                "key.parsed_scope.start" : 135,
                "key.reusingastcontext" : false,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:12SimpleLoggerAAC12logFileStatsSi9fileCount_Si9totalSizetyFZAEL_Sivp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> () -> (fileCount: Int, totalSize: Int)",
            "key.typeusr" : "$sSi9fileCount_Si9totalSizetycD",
            "key.usr" : "s:12SimpleLoggerAAC12logFileStatsSi9fileCount_Si9totalSizetyFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func loadLogEntries(fromFileNamed fileName: <Type usr=\"s:SS\">String<\/Type>) -&gt; [<Type usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 8547
              }
            ],
            "key.bodylength" : 542,
            "key.bodyoffset" : 8628,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Loads and returns all log entries from a specified log file in reverse chronological order.\n\nRetrieves complete log history from a specific file, presenting entries with the most recent\nfirst for optimal viewing and analysis. This method handles file access, JSON parsing,\nand data transformation automatically.\n\nThe loading process includes:\n1. **File Resolution**: Constructs the full file path with proper extension handling\n2. **Data Loading**: Reads JSON content from the specified log file\n3. **Deserialization**: Converts JSON data to structured LogEntry objects\n4. **Chronological Ordering**: Reverses entries to show most recent first\n5. **Error Recovery**: Returns empty array for missing or corrupted files\n\n- Parameter fileName: The base name of the log file without extension\n  (e.g., \"MyViewController.swift\" or \"MyViewController\")\n\n- Returns: Array of `LogEntry` objects in reverse chronological order,\n          or empty array if file doesn't exist or cannot be read\n\n- Note: Automatically appends `.swift.json` extension to the provided filename",
            "key.doc.column" : 24,
            "key.doc.comment" : "Loads and returns all log entries from a specified log file in reverse chronological order.\n\nRetrieves complete log history from a specific file, presenting entries with the most recent\nfirst for optimal viewing and analysis. This method handles file access, JSON parsing,\nand data transformation automatically.\n\nThe loading process includes:\n1. **File Resolution**: Constructs the full file path with proper extension handling\n2. **Data Loading**: Reads JSON content from the specified log file\n3. **Deserialization**: Converts JSON data to structured LogEntry objects\n4. **Chronological Ordering**: Reverses entries to show most recent first\n5. **Error Recovery**: Returns empty array for missing or corrupted files\n\n- Parameter fileName: The base name of the log file without extension\n  (e.g., \"MyViewController.swift\" or \"MyViewController\")\n\n- Returns: Array of `LogEntry` objects in reverse chronological order,\n          or empty array if file doesn't exist or cannot be read\n\n- Note: Automatically appends `.swift.json` extension to the provided filename",
            "key.doc.declaration" : "@MainActor public static func loadLogEntries(fromFileNamed fileName: String) -> [LogEntry]",
            "key.doc.discussion" : [
              {
                "Para" : "Retrieves complete log history from a specific file, presenting entries with the most recent first for optimal viewing and analysis. This method handles file access, JSON parsing, and data transformation automatically."
              },
              {
                "Para" : "The loading process includes:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"166\" column=\"24\"><Name>loadLogEntries(fromFileNamed:)<\/Name><USR>s:12SimpleLoggerAAC14loadLogEntries13fromFileNamedSayAA0D5EntryVGSS_tFZ<\/USR><Declaration>@MainActor public static func loadLogEntries(fromFileNamed fileName: String) -&gt; [LogEntry]<\/Declaration><CommentParts><Abstract><Para>Loads and returns all log entries from a specified log file in reverse chronological order.<\/Para><\/Abstract><Parameters><Parameter><Name>fileName<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The base name of the log file without extension (e.g., “MyViewController.swift” or “MyViewController”)<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Array of <codeVoice>LogEntry<\/codeVoice> objects in reverse chronological order, or empty array if file doesn’t exist or cannot be read<\/Para><\/ResultDiscussion><Discussion><Para>Retrieves complete log history from a specific file, presenting entries with the most recent first for optimal viewing and analysis. This method handles file access, JSON parsing, and data transformation automatically.<\/Para><Para>The loading process includes:<\/Para><List-Number><Item><Para><bold>File Resolution<\/bold>: Constructs the full file path with proper extension handling<\/Para><\/Item><Item><Para><bold>Data Loading<\/bold>: Reads JSON content from the specified log file<\/Para><\/Item><Item><Para><bold>Deserialization<\/bold>: Converts JSON data to structured LogEntry objects<\/Para><\/Item><Item><Para><bold>Chronological Ordering<\/bold>: Reverses entries to show most recent first<\/Para><\/Item><Item><Para><bold>Error Recovery<\/bold>: Returns empty array for missing or corrupted files<\/Para><\/Item><\/List-Number><Note><Para>Automatically appends <codeVoice>.swift.json<\/codeVoice> extension to the provided filename<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 166,
            "key.doc.name" : "loadLogEntries(fromFileNamed:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The base name of the log file without extension (e.g., “MyViewController.swift” or “MyViewController”)"
                  }
                ],
                "name" : "fileName"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "Array of `LogEntry` objects in reverse chronological order, or empty array if file doesn’t exist or cannot be read"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1214,
            "key.docoffset" : 7329,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>loadLogEntries<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>fromFileNamed<\/decl.var.parameter.argument_label> <decl.var.parameter.name>fileName<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/ref.struct>]<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 617,
            "key.line" : 166,
            "key.modulename" : "SimpleLogger",
            "key.name" : "loadLogEntries(fromFileNamed:)",
            "key.namelength" : 46,
            "key.nameoffset" : 8566,
            "key.offset" : 8554,
            "key.parsed_declaration" : "public static func loadLogEntries(fromFileNamed fileName: String) -> [LogEntry]",
            "key.parsed_scope.end" : 178,
            "key.parsed_scope.start" : 166,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 167,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 8641,
                "key.offset" : 8637,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 167,
                "key.parsed_scope.start" : 167,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC14loadLogEntries13fromFileNamedSayAA0D5EntryVGSS_tFZ11fileManagerL_So06NSFileK0Cvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let dirURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dirURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 54,
                "key.line" : 171,
                "key.modulename" : "SimpleLogger",
                "key.name" : "dirURL",
                "key.namelength" : 6,
                "key.nameoffset" : 8823,
                "key.offset" : 8819,
                "key.parsed_declaration" : "let dirURL = docsURL.appendingPathComponent(\"logging\")",
                "key.parsed_scope.end" : 171,
                "key.parsed_scope.start" : 171,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC14loadLogEntries13fromFileNamedSayAA0D5EntryVGSS_tFZ6dirURLL_10Foundation0K0Vvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let fileURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 69,
                "key.line" : 172,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileURL",
                "key.namelength" : 7,
                "key.nameoffset" : 8886,
                "key.offset" : 8882,
                "key.parsed_declaration" : "let fileURL = dirURL.appendingPathComponent(\"\\(fileName).swift.json\")",
                "key.parsed_scope.end" : 172,
                "key.parsed_scope.start" : 172,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC14loadLogEntries13fromFileNamedSayAA0D5EntryVGSS_tFZ7fileURLL_10Foundation0K0Vvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let entries: [<Type usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/Type>]<\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>entries<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 76,
                "key.line" : 176,
                "key.modulename" : "SimpleLogger",
                "key.name" : "entries",
                "key.namelength" : 7,
                "key.nameoffset" : 9059,
                "key.offset" : 9055,
                "key.parsed_declaration" : "let entries = (try? JSONDecoder().decode([LogEntry].self, from: data)) ?? []",
                "key.parsed_scope.end" : 176,
                "key.parsed_scope.start" : 176,
                "key.reusingastcontext" : false,
                "key.typename" : "[LogEntry]",
                "key.typeusr" : "$sSay12SimpleLogger8LogEntryVGD",
                "key.usr" : "s:12SimpleLoggerAAC14loadLogEntries13fromFileNamedSayAA0D5EntryVGSS_tFZ7entriesL_AGvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> (String) -> [LogEntry]",
            "key.typeusr" : "$s13fromFileNamedSay12SimpleLogger8LogEntryVGSS_tcD",
            "key.usr" : "s:12SimpleLoggerAAC14loadLogEntries13fromFileNamedSayAA0D5EntryVGSS_tFZ"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 23,
            "key.name" : "MARK: - Logging Methods",
            "key.offset" : 9180
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func log(_ message: <Type usr=\"s:SS\">String<\/Type>, level: <Type usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/Type> = .info, isSnapshot: <Type usr=\"s:Sb\">Bool<\/Type> = false, file: <Type usr=\"s:SS\">String<\/Type> = #file, function: <Type usr=\"s:SS\">String<\/Type> = #function, line: <Type usr=\"s:Si\">Int<\/Type> = #line, timestamp: <Type usr=\"s:10Foundation4DateV\">Date<\/Type> = Date())<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10545
              }
            ],
            "key.bodylength" : 458,
            "key.bodyoffset" : 10798,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Logs a message with comprehensive contextual information for debugging and tracing.\n\nCreates a structured log entry with automatic context capture including source file,\nfunction name, and line number. This method provides the primary logging interface\nfor simple text messages with optional severity level specification.\n\nThe logging process includes:\n1. **Context Capture**: Automatically records calling context using compiler directives\n2. **Entry Creation**: Constructs structured LogEntry with all contextual information\n3. **File Organization**: Groups entries by source file for logical organization\n4. **Persistence**: Appends entry to appropriate log file with atomic operations\n\n- Parameters:\n  - message: The informational content to log\n  - level: The severity level for categorization (defaults to `.info`)\n  - file: Source file path (automatically filled by compiler)\n  - function: Function name where log is called (automatically filled)\n  - line: Line number of the log call (automatically filled)\n  - timestamp: Time of log creation (defaults to current time)\n\n- Note: Context parameters are automatically filled and should not be manually specified",
            "key.doc.column" : 24,
            "key.doc.comment" : "Logs a message with comprehensive contextual information for debugging and tracing.\n\nCreates a structured log entry with automatic context capture including source file,\nfunction name, and line number. This method provides the primary logging interface\nfor simple text messages with optional severity level specification.\n\nThe logging process includes:\n1. **Context Capture**: Automatically records calling context using compiler directives\n2. **Entry Creation**: Constructs structured LogEntry with all contextual information\n3. **File Organization**: Groups entries by source file for logical organization\n4. **Persistence**: Appends entry to appropriate log file with atomic operations\n\n- Parameters:\n  - message: The informational content to log\n  - level: The severity level for categorization (defaults to `.info`)\n  - file: Source file path (automatically filled by compiler)\n  - function: Function name where log is called (automatically filled)\n  - line: Line number of the log call (automatically filled)\n  - timestamp: Time of log creation (defaults to current time)\n\n- Note: Context parameters are automatically filled and should not be manually specified",
            "key.doc.declaration" : "@MainActor public static func log(_ message: String, level: LogLevel = .info, isSnapshot: Bool = false, file: String = #file, function: String = #function, line: Int = #line, timestamp: Date = Date())",
            "key.doc.discussion" : [
              {
                "Para" : "Creates a structured log entry with automatic context capture including source file, function name, and line number. This method provides the primary logging interface for simple text messages with optional severity level specification."
              },
              {
                "Para" : "The logging process includes:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"203\" column=\"24\"><Name>log(_:level:isSnapshot:file:function:line:timestamp:)<\/Name><USR>s:12SimpleLoggerAAC3log_5level10isSnapshot4file8function4line9timestampySS_AA8LogLevelOSbS2SSi10Foundation4DateVtFZ<\/USR><Declaration>@MainActor public static func log(_ message: String, level: LogLevel = .info, isSnapshot: Bool = false, file: String = #file, function: String = #function, line: Int = #line, timestamp: Date = Date())<\/Declaration><CommentParts><Abstract><Para>Logs a message with comprehensive contextual information for debugging and tracing.<\/Para><\/Abstract><Parameters><Parameter><Name>message<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The informational content to log<\/Para><\/Discussion><\/Parameter><Parameter><Name>level<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The severity level for categorization (defaults to <codeVoice>.info<\/codeVoice>)<\/Para><\/Discussion><\/Parameter><Parameter><Name>file<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Source file path (automatically filled by compiler)<\/Para><\/Discussion><\/Parameter><Parameter><Name>function<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Function name where log is called (automatically filled)<\/Para><\/Discussion><\/Parameter><Parameter><Name>line<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Line number of the log call (automatically filled)<\/Para><\/Discussion><\/Parameter><Parameter><Name>timestamp<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Time of log creation (defaults to current time)<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Creates a structured log entry with automatic context capture including source file, function name, and line number. This method provides the primary logging interface for simple text messages with optional severity level specification.<\/Para><Para>The logging process includes:<\/Para><List-Number><Item><Para><bold>Context Capture<\/bold>: Automatically records calling context using compiler directives<\/Para><\/Item><Item><Para><bold>Entry Creation<\/bold>: Constructs structured LogEntry with all contextual information<\/Para><\/Item><Item><Para><bold>File Organization<\/bold>: Groups entries by source file for logical organization<\/Para><\/Item><Item><Para><bold>Persistence<\/bold>: Appends entry to appropriate log file with atomic operations<\/Para><\/Item><\/List-Number><Note><Para>Context parameters are automatically filled and should not be manually specified<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 203,
            "key.doc.name" : "log(_:level:isSnapshot:file:function:line:timestamp:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The informational content to log"
                  }
                ],
                "name" : "message"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The severity level for categorization (defaults to `.info`)"
                  }
                ],
                "name" : "level"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Source file path (automatically filled by compiler)"
                  }
                ],
                "name" : "file"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Function name where log is called (automatically filled)"
                  }
                ],
                "name" : "function"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Line number of the log call (automatically filled)"
                  }
                ],
                "name" : "line"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Time of log creation (defaults to current time)"
                  }
                ],
                "name" : "timestamp"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1328,
            "key.docoffset" : 9213,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>log<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>message<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>level<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/ref.enum><\/decl.var.parameter.type> = .info<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>isSnapshot<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = false<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>file<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>#file<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>function<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>#function<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>line<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>#line<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>timestamp<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.parameter.type> = Date()<\/decl.var.parameter>)<\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 705,
            "key.line" : 203,
            "key.modulename" : "SimpleLogger",
            "key.name" : "log(_:level:isSnapshot:file:function:line:timestamp:)",
            "key.namelength" : 232,
            "key.nameoffset" : 10564,
            "key.offset" : 10552,
            "key.parsed_declaration" : "public static func log(\n    _ message: String,\n    level: LogLevel = .info,\n    isSnapshot: Bool = false,\n    file: String = #file,\n    function: String = #function,\n    line: Int = #line,\n    timestamp: Date = Date()\n)",
            "key.parsed_scope.end" : 224,
            "key.parsed_scope.start" : 203,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ\">log(_:_:level:isSnapshot:file:function:line:timestamp:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let baseFileName: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>baseFileName<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 63,
                "key.line" : 213,
                "key.modulename" : "SimpleLogger",
                "key.name" : "baseFileName",
                "key.namelength" : 12,
                "key.nameoffset" : 10877,
                "key.offset" : 10873,
                "key.parsed_declaration" : "let baseFileName = URL(fileURLWithPath: file).lastPathComponent",
                "key.parsed_scope.end" : 213,
                "key.parsed_scope.start" : 213,
                "key.reusingastcontext" : false,
                "key.typename" : "String",
                "key.typeusr" : "$sSSD",
                "key.usr" : "s:12SimpleLoggerAAC3log_5level10isSnapshot4file8function4line9timestampySS_AA8LogLevelOSbS2SSi10Foundation4DateVtFZ12baseFileNameL_SSvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let entry: <Type usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>entry<\/decl.name>: <decl.var.type><ref.struct usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 236,
                "key.line" : 214,
                "key.modulename" : "SimpleLogger",
                "key.name" : "entry",
                "key.namelength" : 5,
                "key.nameoffset" : 10949,
                "key.offset" : 10945,
                "key.parsed_declaration" : "let entry = LogEntry(\n    message: message,\n    level: level,\n    isSnapshot: isSnapshot,\n    file: file,\n    function: function,\n    line: line,\n    timestamp: timestamp\n)",
                "key.parsed_scope.end" : 214,
                "key.parsed_scope.start" : 214,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"c:@S@entry\">entry<\/RelatedName>"
                  }
                ],
                "key.reusingastcontext" : false,
                "key.typename" : "LogEntry",
                "key.typeusr" : "$s12SimpleLogger8LogEntryVD",
                "key.usr" : "s:12SimpleLoggerAAC3log_5level10isSnapshot4file8function4line9timestampySS_AA8LogLevelOSbS2SSi10Foundation4DateVtFZ5entryL_AA0K5EntryVvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> (String, LogLevel, Bool, String, String, Int, Date) -> ()",
            "key.typeusr" : "$s_5level10isSnapshot4file8function4line9timestampySS_12SimpleLogger8LogLevelOSbS2SSi10Foundation4DateVtcD",
            "key.usr" : "s:12SimpleLoggerAAC3log_5level10isSnapshot4file8function4line9timestampySS_AA8LogLevelOSbS2SSi10Foundation4DateVtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func log&lt;T&gt;(_ message: <Type usr=\"s:SS\">String<\/Type>, _ data: <Type usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\">T<\/Type>?, level: <Type usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/Type> = .info, isSnapshot: <Type usr=\"s:Sb\">Bool<\/Type> = false, file: <Type usr=\"s:SS\">String<\/Type> = #file, function: <Type usr=\"s:SS\">String<\/Type> = #function, line: <Type usr=\"s:Si\">Int<\/Type> = #line, timestamp: <Type usr=\"s:10Foundation4DateV\">Date<\/Type> = Date()) where <Type usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\">T<\/Type> : <Type usr=\"s:Se\">Decodable<\/Type>, <Type usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\">T<\/Type> : <Type usr=\"s:SE\">Encodable<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12902
              }
            ],
            "key.bodylength" : 612,
            "key.bodyoffset" : 13187,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Logs a message along with a structured data object for comprehensive debugging.\n\nProvides enhanced logging capabilities by combining text messages with serialized\ndata objects. This method is particularly useful for debugging complex state changes,\nAPI responses, or data transformations where both context and data are important.\n\nThe enhanced logging process includes:\n1. **Message Encoding**: Serializes the message string to JSON format\n2. **Object Serialization**: Converts the provided Codable object to JSON representation\n3. **Type Information**: Records the object's type name for debugging context\n4. **Entry Creation**: Constructs comprehensive LogEntry with all information\n5. **File Persistence**: Appends the enriched entry to the appropriate log file\n\n- Parameters:\n  - message: The descriptive text message providing context for the logged data\n  - data: Optional Codable object to serialize and include with the log entry\n  - level: The severity level for categorization (defaults to `.info`)\n  - file: Source file path (automatically filled by compiler)\n  - function: Function name where log is called (automatically filled)\n  - line: Line number of the log call (automatically filled)\n  - timestamp: Time of log creation (defaults to current time)\n\n- Note: Both message and data objects are JSON-encoded for consistent storage format\n- Important: Force unwrapping is used for JSON encoding - ensure objects are properly Codable",
            "key.doc.column" : 24,
            "key.doc.comment" : "Logs a message along with a structured data object for comprehensive debugging.\n\nProvides enhanced logging capabilities by combining text messages with serialized\ndata objects. This method is particularly useful for debugging complex state changes,\nAPI responses, or data transformations where both context and data are important.\n\nThe enhanced logging process includes:\n1. **Message Encoding**: Serializes the message string to JSON format\n2. **Object Serialization**: Converts the provided Codable object to JSON representation\n3. **Type Information**: Records the object's type name for debugging context\n4. **Entry Creation**: Constructs comprehensive LogEntry with all information\n5. **File Persistence**: Appends the enriched entry to the appropriate log file\n\n- Parameters:\n  - message: The descriptive text message providing context for the logged data\n  - data: Optional Codable object to serialize and include with the log entry\n  - level: The severity level for categorization (defaults to `.info`)\n  - file: Source file path (automatically filled by compiler)\n  - function: Function name where log is called (automatically filled)\n  - line: Line number of the log call (automatically filled)\n  - timestamp: Time of log creation (defaults to current time)\n\n- Note: Both message and data objects are JSON-encoded for consistent storage format\n- Important: Force unwrapping is used for JSON encoding - ensure objects are properly Codable",
            "key.doc.declaration" : "@MainActor public static func log<T>(_ message: String, _ data: T?, level: LogLevel = .info, isSnapshot: Bool = false, file: String = #file, function: String = #function, line: Int = #line, timestamp: Date = Date()) where T : Decodable, T : Encodable",
            "key.doc.discussion" : [
              {
                "Para" : "Provides enhanced logging capabilities by combining text messages with serialized data objects. This method is particularly useful for debugging complex state changes, API responses, or data transformations where both context and data are important."
              },
              {
                "Para" : "The enhanced logging process includes:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"250\" column=\"24\"><Name>log(_:_:level:isSnapshot:file:function:line:timestamp:)<\/Name><USR>s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ<\/USR><Declaration>@MainActor public static func log&lt;T&gt;(_ message: String, _ data: T?, level: LogLevel = .info, isSnapshot: Bool = false, file: String = #file, function: String = #function, line: Int = #line, timestamp: Date = Date()) where T : Decodable, T : Encodable<\/Declaration><CommentParts><Abstract><Para>Logs a message along with a structured data object for comprehensive debugging.<\/Para><\/Abstract><Parameters><Parameter><Name>message<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The descriptive text message providing context for the logged data<\/Para><\/Discussion><\/Parameter><Parameter><Name>data<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Optional Codable object to serialize and include with the log entry<\/Para><\/Discussion><\/Parameter><Parameter><Name>level<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The severity level for categorization (defaults to <codeVoice>.info<\/codeVoice>)<\/Para><\/Discussion><\/Parameter><Parameter><Name>file<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Source file path (automatically filled by compiler)<\/Para><\/Discussion><\/Parameter><Parameter><Name>function<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Function name where log is called (automatically filled)<\/Para><\/Discussion><\/Parameter><Parameter><Name>line<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Line number of the log call (automatically filled)<\/Para><\/Discussion><\/Parameter><Parameter><Name>timestamp<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Time of log creation (defaults to current time)<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Provides enhanced logging capabilities by combining text messages with serialized data objects. This method is particularly useful for debugging complex state changes, API responses, or data transformations where both context and data are important.<\/Para><Para>The enhanced logging process includes:<\/Para><List-Number><Item><Para><bold>Message Encoding<\/bold>: Serializes the message string to JSON format<\/Para><\/Item><Item><Para><bold>Object Serialization<\/bold>: Converts the provided Codable object to JSON representation<\/Para><\/Item><Item><Para><bold>Type Information<\/bold>: Records the object’s type name for debugging context<\/Para><\/Item><Item><Para><bold>Entry Creation<\/bold>: Constructs comprehensive LogEntry with all information<\/Para><\/Item><Item><Para><bold>File Persistence<\/bold>: Appends the enriched entry to the appropriate log file<\/Para><\/Item><\/List-Number><Note><Para>Both message and data objects are JSON-encoded for consistent storage format<\/Para><\/Note><Important><Para>Force unwrapping is used for JSON encoding - ensure objects are properly Codable<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 250,
            "key.doc.name" : "log(_:_:level:isSnapshot:file:function:line:timestamp:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The descriptive text message providing context for the logged data"
                  }
                ],
                "name" : "message"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Optional Codable object to serialize and include with the log entry"
                  }
                ],
                "name" : "data"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The severity level for categorization (defaults to `.info`)"
                  }
                ],
                "name" : "level"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Source file path (automatically filled by compiler)"
                  }
                ],
                "name" : "file"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Function name where log is called (automatically filled)"
                  }
                ],
                "name" : "function"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Line number of the log call (automatically filled)"
                  }
                ],
                "name" : "line"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Time of log creation (defaults to current time)"
                  }
                ],
                "name" : "timestamp"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1631,
            "key.docoffset" : 11267,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>log<\/decl.name>&lt;<decl.generic_type_param usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>message<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>data<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\">T<\/ref.generic_type_param>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>level<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:12SimpleLogger8LogLevelO\">LogLevel<\/ref.enum><\/decl.var.parameter.type> = .info<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>isSnapshot<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = false<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>file<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>#file<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>function<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>#function<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>line<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>#line<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>timestamp<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.parameter.type> = Date()<\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:Se\">Decodable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SE\">Encodable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 891,
            "key.line" : 250,
            "key.modulename" : "SimpleLogger",
            "key.name" : "log(_:_:level:isSnapshot:file:function:line:timestamp:)",
            "key.namelength" : 264,
            "key.nameoffset" : 12921,
            "key.offset" : 12909,
            "key.parsed_declaration" : "public static func log<T: Codable>(\n    _ message: String,\n    _ data: T?,\n    level: LogLevel = .info,\n    isSnapshot: Bool = false,\n    file: String = #file,\n    function: String = #function,\n    line: Int = #line,\n    timestamp: Date = Date()\n)",
            "key.parsed_scope.end" : 273,
            "key.parsed_scope.start" : 250,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:12SimpleLoggerAAC3log_5level10isSnapshot4file8function4line9timestampySS_AA8LogLevelOSbS2SSi10Foundation4DateVtFZ\">log(_:level:isSnapshot:file:function:line:timestamp:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:s7Codablea\">Codable<\/Type><\/Declaration>",
                "key.column" : 28,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 7,
                    "key.offset" : 12928
                  }
                ],
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.typealias usr=\"s:s7Codablea\">Codable<\/ref.typealias><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Codable"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 10,
                "key.line" : 250,
                "key.modulename" : "SimpleLogger",
                "key.name" : "T",
                "key.namelength" : 1,
                "key.nameoffset" : 12925,
                "key.offset" : 12925,
                "key.parsed_declaration" : "public static func log<T: Codable",
                "key.parsed_scope.end" : 250,
                "key.parsed_scope.start" : 250,
                "key.reusingastcontext" : false,
                "key.typename" : "T.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ1TL_xmfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let baseFileName: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>baseFileName<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 63,
                "key.line" : 260,
                "key.modulename" : "SimpleLogger",
                "key.name" : "baseFileName",
                "key.namelength" : 12,
                "key.nameoffset" : 13200,
                "key.offset" : 13196,
                "key.parsed_declaration" : "let baseFileName = URL(fileURLWithPath: file).lastPathComponent",
                "key.parsed_scope.end" : 260,
                "key.parsed_scope.start" : 260,
                "key.reusingastcontext" : false,
                "key.typename" : "String",
                "key.typeusr" : "$sSSD",
                "key.usr" : "s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ12baseFileNameL_SSvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let entry: <Type usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>entry<\/decl.name>: <decl.var.type><ref.struct usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 456,
                "key.line" : 261,
                "key.modulename" : "SimpleLogger",
                "key.name" : "entry",
                "key.namelength" : 5,
                "key.nameoffset" : 13272,
                "key.offset" : 13268,
                "key.parsed_declaration" : "let entry = LogEntry(\n    message: String(data: try! JSONEncoder().encode(message), encoding: .utf8)!,\n    objectName: String(describing: T.self),\n    objectData: data != nil ? String(data: try! JSONEncoder().encode(data!), encoding: .utf8) : nil,\n    level: level,\n    isSnapshot: isSnapshot,\n    file: file,\n    function: function,\n    line: line,\n    timestamp: timestamp\n)",
                "key.parsed_scope.end" : 261,
                "key.parsed_scope.start" : 261,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"c:@S@entry\">entry<\/RelatedName>"
                  }
                ],
                "key.reusingastcontext" : false,
                "key.typename" : "LogEntry",
                "key.typeusr" : "$s12SimpleLogger8LogEntryVD",
                "key.usr" : "s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ5entryL_AA0K5EntryVvp"
              }
            ],
            "key.typename" : "<T where T : Decodable, T : Encodable> (SimpleLogger.Type) -> (String, T?, LogLevel, Bool, String, String, Int, Date) -> ()",
            "key.typeusr" : "$s__5level10isSnapshot4file8function4line9timestampySS_xSg12SimpleLogger8LogLevelOSbS2SSi10Foundation4DateVtcSeRzSERzluD",
            "key.usr" : "s:12SimpleLoggerAAC3log__5level10isSnapshot4file8function4line9timestampySS_xSgAA8LogLevelOSbS2SSi10Foundation4DateVtSeRzSERzlFZ"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 24,
            "key.name" : "MARK: - File Persistence",
            "key.offset" : 13813
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> private static func appendLogEntryToDisk(forFileName fileName: <Type usr=\"s:SS\">String<\/Type>, entry: <Type usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 15131
              }
            ],
            "key.bodylength" : 855,
            "key.bodyoffset" : 15220,
            "key.column" : 25,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Appends a log entry to its corresponding JSON file with automatic file management.\n\nHandles the persistence logic for log entries, including file creation, content loading,\nsize management, and atomic writing operations. This method ensures data integrity\nand implements automatic log rotation to prevent excessive file growth.\n\nThe persistence process includes:\n1. **File Location**: Resolves the target log file URL for the specified filename\n2. **Content Loading**: Reads existing log entries if the file already exists\n3. **Size Management**: Implements automatic rotation when files exceed 10MB limit\n4. **Entry Rotation**: Removes oldest entries (up to 5) when size threshold is reached\n5. **Data Appending**: Adds the new entry to the existing collection\n6. **Atomic Writing**: Saves the updated log file with atomic operations\n\n- Parameters:\n  - fileName: Base name of the target log file (without extension)\n  - entry: The LogEntry object to append to the file\n\n- Note: Implements 10MB file size limit with automatic cleanup of oldest entries\n- Important: Uses atomic writing to prevent data corruption during file updates",
            "key.doc.column" : 25,
            "key.doc.comment" : "Appends a log entry to its corresponding JSON file with automatic file management.\n\nHandles the persistence logic for log entries, including file creation, content loading,\nsize management, and atomic writing operations. This method ensures data integrity\nand implements automatic log rotation to prevent excessive file growth.\n\nThe persistence process includes:\n1. **File Location**: Resolves the target log file URL for the specified filename\n2. **Content Loading**: Reads existing log entries if the file already exists\n3. **Size Management**: Implements automatic rotation when files exceed 10MB limit\n4. **Entry Rotation**: Removes oldest entries (up to 5) when size threshold is reached\n5. **Data Appending**: Adds the new entry to the existing collection\n6. **Atomic Writing**: Saves the updated log file with atomic operations\n\n- Parameters:\n  - fileName: Base name of the target log file (without extension)\n  - entry: The LogEntry object to append to the file\n\n- Note: Implements 10MB file size limit with automatic cleanup of oldest entries\n- Important: Uses atomic writing to prevent data corruption during file updates",
            "key.doc.declaration" : "@MainActor private static func appendLogEntryToDisk(forFileName fileName: String, entry: LogEntry)",
            "key.doc.discussion" : [
              {
                "Para" : "Handles the persistence logic for log entries, including file creation, content loading, size management, and atomic writing operations. This method ensures data integrity and implements automatic log rotation to prevent excessive file growth."
              },
              {
                "Para" : "The persistence process includes:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"297\" column=\"25\"><Name>appendLogEntryToDisk(forFileName:entry:)<\/Name><USR>s:12SimpleLoggerAAC20appendLogEntryToDisk33_61A698F9C262E84479D734AD422F70E3LL11forFileName5entryySS_AA0dE0VtFZ<\/USR><Declaration>@MainActor private static func appendLogEntryToDisk(forFileName fileName: String, entry: LogEntry)<\/Declaration><CommentParts><Abstract><Para>Appends a log entry to its corresponding JSON file with automatic file management.<\/Para><\/Abstract><Parameters><Parameter><Name>fileName<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Base name of the target log file (without extension)<\/Para><\/Discussion><\/Parameter><Parameter><Name>entry<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The LogEntry object to append to the file<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Handles the persistence logic for log entries, including file creation, content loading, size management, and atomic writing operations. This method ensures data integrity and implements automatic log rotation to prevent excessive file growth.<\/Para><Para>The persistence process includes:<\/Para><List-Number><Item><Para><bold>File Location<\/bold>: Resolves the target log file URL for the specified filename<\/Para><\/Item><Item><Para><bold>Content Loading<\/bold>: Reads existing log entries if the file already exists<\/Para><\/Item><Item><Para><bold>Size Management<\/bold>: Implements automatic rotation when files exceed 10MB limit<\/Para><\/Item><Item><Para><bold>Entry Rotation<\/bold>: Removes oldest entries (up to 5) when size threshold is reached<\/Para><\/Item><Item><Para><bold>Data Appending<\/bold>: Adds the new entry to the existing collection<\/Para><\/Item><Item><Para><bold>Atomic Writing<\/bold>: Saves the updated log file with atomic operations<\/Para><\/Item><\/List-Number><Note><Para>Implements 10MB file size limit with automatic cleanup of oldest entries<\/Para><\/Note><Important><Para>Uses atomic writing to prevent data corruption during file updates<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 297,
            "key.doc.name" : "appendLogEntryToDisk(forFileName:entry:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Base name of the target log file (without extension)"
                  }
                ],
                "name" : "fileName"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The LogEntry object to append to the file"
                  }
                ],
                "name" : "entry"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1284,
            "key.docoffset" : 13843,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>appendLogEntryToDisk<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>forFileName<\/decl.var.parameter.argument_label> <decl.var.parameter.name>fileName<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>entry<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 937,
            "key.line" : 297,
            "key.modulename" : "SimpleLogger",
            "key.name" : "appendLogEntryToDisk(forFileName:entry:)",
            "key.namelength" : 67,
            "key.nameoffset" : 15151,
            "key.offset" : 15139,
            "key.parsed_declaration" : "private static func appendLogEntryToDisk(forFileName fileName: String, entry: LogEntry)",
            "key.parsed_scope.end" : 317,
            "key.parsed_scope.start" : 297,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var entries: [<Type usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/Type>]<\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>entries<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:12SimpleLogger8LogEntryV\">LogEntry<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 28,
                "key.line" : 299,
                "key.modulename" : "SimpleLogger",
                "key.name" : "entries",
                "key.namelength" : 7,
                "key.nameoffset" : 15307,
                "key.offset" : 15303,
                "key.parsed_declaration" : "var entries: [LogEntry] = []",
                "key.parsed_scope.end" : 299,
                "key.parsed_scope.start" : 299,
                "key.reusingastcontext" : false,
                "key.typename" : "[LogEntry]",
                "key.typeusr" : "$sSay12SimpleLogger8LogEntryVGD",
                "key.usr" : "s:12SimpleLoggerAAC20appendLogEntryToDisk33_61A698F9C262E84479D734AD422F70E3LL11forFileName5entryySS_AA0dE0VtFZ7entriesL_SayAHGvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> (String, LogEntry) -> ()",
            "key.typeusr" : "$s11forFileName5entryySS_12SimpleLogger8LogEntryVtcD",
            "key.usr" : "s:12SimpleLoggerAAC20appendLogEntryToDisk33_61A698F9C262E84479D734AD422F70E3LL11forFileName5entryySS_AA0dE0VtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func snapshot(_ items: any <Type usr=\"s:s7Codablea\">Codable<\/Type>...)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 17457
              }
            ],
            "key.bodylength" : 348,
            "key.bodyoffset" : 17511,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Captures comprehensive environment snapshots for debugging and diagnostics.\n\nCreates detailed snapshots of one or more application components and their current state,\nproviding developers with complete environmental context for debugging complex issues.\nThis method is particularly useful for capturing system state before or after critical operations.\n\nThe snapshot process supports any number of `Codable` components, such as:\n- **AppState**: Complete application state including user session and configuration\n- **SettingsManager**: Current settings manager state and user preferences\n- **GeofenceResolver**: Active geofence data and location-based configurations\n\nEach snapshot is logged with debug-level severity and synthetic file\/function information\nto clearly identify these as environment snapshots rather than regular log entries.\n\nExample:\n```swift\nsnapshot(appState, SettingsDebug(), GeofenceResolver.shared.geofences)\n```\n\n- Parameter items: A variadic list of environment components conforming to `Codable`\n\n- Note: All snapshots use debug-level logging and synthetic source information.\n- Important: Each component must conform to `Codable` so it can be serialized and logged.",
            "key.doc.column" : 24,
            "key.doc.comment" : "Captures comprehensive environment snapshots for debugging and diagnostics.\n\nCreates detailed snapshots of one or more application components and their current state,\nproviding developers with complete environmental context for debugging complex issues.\nThis method is particularly useful for capturing system state before or after critical operations.\n\nThe snapshot process supports any number of `Codable` components, such as:\n- **AppState**: Complete application state including user session and configuration\n- **SettingsManager**: Current settings manager state and user preferences\n- **GeofenceResolver**: Active geofence data and location-based configurations\n\nEach snapshot is logged with debug-level severity and synthetic file\/function information\nto clearly identify these as environment snapshots rather than regular log entries.\n\nExample:\n```swift\nsnapshot(appState, SettingsDebug(), GeofenceResolver.shared.geofences)\n```\n\n- Parameter items: A variadic list of environment components conforming to `Codable`\n\n- Note: All snapshots use debug-level logging and synthetic source information.\n- Important: Each component must conform to `Codable` so it can be serialized and logged.",
            "key.doc.declaration" : "@MainActor public static func snapshot(_ items: any Codable...)",
            "key.doc.discussion" : [
              {
                "Para" : "Creates detailed snapshots of one or more application components and their current state, providing developers with complete environmental context for debugging complex issues. This method is particularly useful for capturing system state before or after critical operations."
              },
              {
                "Para" : "The snapshot process supports any number of `Codable` components, such as:"
              },
              {
                "List-Bullet" : ""
              },
              {
                "Para" : "Each snapshot is logged with debug-level severity and synthetic file\/function information to clearly identify these as environment snapshots rather than regular log entries."
              },
              {
                "Para" : "Example:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"342\" column=\"24\"><Name>snapshot(_:)<\/Name><USR>s:12SimpleLoggerAAC8snapshotyySe_SEpd_tFZ<\/USR><Declaration>@MainActor public static func snapshot(_ items: any Codable...)<\/Declaration><CommentParts><Abstract><Para>Captures comprehensive environment snapshots for debugging and diagnostics.<\/Para><\/Abstract><Parameters><Parameter><Name>items<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A variadic list of environment components conforming to <codeVoice>Codable<\/codeVoice><\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Creates detailed snapshots of one or more application components and their current state, providing developers with complete environmental context for debugging complex issues. This method is particularly useful for capturing system state before or after critical operations.<\/Para><Para>The snapshot process supports any number of <codeVoice>Codable<\/codeVoice> components, such as:<\/Para><List-Bullet><Item><Para><bold>AppState<\/bold>: Complete application state including user session and configuration<\/Para><\/Item><Item><Para><bold>SettingsManager<\/bold>: Current settings manager state and user preferences<\/Para><\/Item><Item><Para><bold>GeofenceResolver<\/bold>: Active geofence data and location-based configurations<\/Para><\/Item><\/List-Bullet><Para>Each snapshot is logged with debug-level severity and synthetic file\/function information to clearly identify these as environment snapshots rather than regular log entries.<\/Para><Para>Example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[snapshot(appState, SettingsDebug(), GeofenceResolver.shared.geofences)]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>All snapshots use debug-level logging and synthetic source information.<\/Para><\/Note><Important><Para>Each component must conform to <codeVoice>Codable<\/codeVoice> so it can be serialized and logged.<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 342,
            "key.doc.name" : "snapshot(_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A variadic list of environment components conforming to `Codable`"
                  }
                ],
                "name" : "items"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1367,
            "key.docoffset" : 16086,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>snapshot<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>items<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>any<\/syntaxtype.keyword> <ref.typealias usr=\"s:s7Codablea\">Codable<\/ref.typealias>...<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 396,
            "key.line" : 342,
            "key.modulename" : "SimpleLogger",
            "key.name" : "snapshot(_:)",
            "key.namelength" : 33,
            "key.nameoffset" : 17476,
            "key.offset" : 17464,
            "key.parsed_declaration" : "public static func snapshot(_ items: any Codable...)",
            "key.parsed_scope.end" : 354,
            "key.parsed_scope.start" : 342,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(SimpleLogger.Type) -> (any Decodable & Encodable...) -> ()",
            "key.typeusr" : "$syySe_SEpd_tcD",
            "key.usr" : "s:12SimpleLoggerAAC8snapshotyySe_SEpd_tFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func clearLogs()<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 18793
              }
            ],
            "key.bodylength" : 552,
            "key.bodyoffset" : 18825,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Deletes all log files in the logging directory for complete log cleanup.\n\nPerforms a comprehensive cleanup operation by removing all JSON log files from the\nlogging directory. This method is useful for maintenance operations, privacy compliance,\nor when starting fresh log collection cycles.\n\nThe cleanup process:\n1. **Directory Access**: Locates the logging directory within document storage\n2. **File Enumeration**: Identifies all JSON files in the logging directory\n3. **Selective Removal**: Deletes only log files (JSON extension) to preserve other data\n4. **Error Tolerance**: Continues operation even if individual file deletions fail\n\n- Note: Only removes files with `.json` extension to avoid deleting non-log files\n- Important: This operation is irreversible - all log history will be permanently lost",
            "key.doc.column" : 24,
            "key.doc.comment" : "Deletes all log files in the logging directory for complete log cleanup.\n\nPerforms a comprehensive cleanup operation by removing all JSON log files from the\nlogging directory. This method is useful for maintenance operations, privacy compliance,\nor when starting fresh log collection cycles.\n\nThe cleanup process:\n1. **Directory Access**: Locates the logging directory within document storage\n2. **File Enumeration**: Identifies all JSON files in the logging directory\n3. **Selective Removal**: Deletes only log files (JSON extension) to preserve other data\n4. **Error Tolerance**: Continues operation even if individual file deletions fail\n\n- Note: Only removes files with `.json` extension to avoid deleting non-log files\n- Important: This operation is irreversible - all log history will be permanently lost",
            "key.doc.declaration" : "@MainActor public static func clearLogs()",
            "key.doc.discussion" : [
              {
                "Para" : "Performs a comprehensive cleanup operation by removing all JSON log files from the logging directory. This method is useful for maintenance operations, privacy compliance, or when starting fresh log collection cycles."
              },
              {
                "Para" : "The cleanup process:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"370\" column=\"24\"><Name>clearLogs()<\/Name><USR>s:12SimpleLoggerAAC9clearLogsyyFZ<\/USR><Declaration>@MainActor public static func clearLogs()<\/Declaration><CommentParts><Abstract><Para>Deletes all log files in the logging directory for complete log cleanup.<\/Para><\/Abstract><Discussion><Para>Performs a comprehensive cleanup operation by removing all JSON log files from the logging directory. This method is useful for maintenance operations, privacy compliance, or when starting fresh log collection cycles.<\/Para><Para>The cleanup process:<\/Para><List-Number><Item><Para><bold>Directory Access<\/bold>: Locates the logging directory within document storage<\/Para><\/Item><Item><Para><bold>File Enumeration<\/bold>: Identifies all JSON files in the logging directory<\/Para><\/Item><Item><Para><bold>Selective Removal<\/bold>: Deletes only log files (JSON extension) to preserve other data<\/Para><\/Item><Item><Para><bold>Error Tolerance<\/bold>: Continues operation even if individual file deletions fail<\/Para><\/Item><\/List-Number><Note><Para>Only removes files with <codeVoice>.json<\/codeVoice> extension to avoid deleting non-log files<\/Para><\/Note><Important><Para>This operation is irreversible - all log history will be permanently lost<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 370,
            "key.doc.name" : "clearLogs()",
            "key.doc.type" : "Function",
            "key.doclength" : 916,
            "key.docoffset" : 17873,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>clearLogs<\/decl.name>()<\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 578,
            "key.line" : 370,
            "key.modulename" : "SimpleLogger",
            "key.name" : "clearLogs()",
            "key.namelength" : 11,
            "key.nameoffset" : 18812,
            "key.offset" : 18800,
            "key.parsed_declaration" : "public static func clearLogs()",
            "key.parsed_scope.end" : 382,
            "key.parsed_scope.start" : 370,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 371,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 18838,
                "key.offset" : 18834,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 371,
                "key.parsed_scope.start" : 371,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC9clearLogsyyFZ11fileManagerL_So06NSFileF0Cvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let dirURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dirURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 70,
                "key.line" : 375,
                "key.modulename" : "SimpleLogger",
                "key.name" : "dirURL",
                "key.namelength" : 6,
                "key.nameoffset" : 19017,
                "key.offset" : 19013,
                "key.parsed_declaration" : "let dirURL = docsURL.appendingPathComponent(Self.loggingDirectoryName)",
                "key.parsed_scope.end" : 375,
                "key.parsed_scope.start" : 375,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC9clearLogsyyFZ6dirURLL_10Foundation0F0Vvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> () -> ()",
            "key.typeusr" : "$syycD",
            "key.usr" : "s:12SimpleLoggerAAC9clearLogsyyFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func deleteLogFile(named fileName: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 20428
              }
            ],
            "key.bodylength" : 238,
            "key.bodyoffset" : 20486,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Deletes a specific log file by its base filename for targeted log management.\n\nProvides granular control over log file management by allowing removal of individual\nlog files based on their source component or module. This method is useful for\ncomponent-specific cleanup or when addressing storage concerns for particular modules.\n\nThe deletion process:\n1. **URL Resolution**: Constructs the complete file path from the base filename\n2. **Existence Check**: Verifies the file exists before attempting deletion\n3. **Safe Removal**: Performs deletion with error handling to prevent crashes\n4. **Extension Handling**: Automatically manages file extension requirements\n\n- Parameter fileName: The base name of the log file to delete\n  (e.g., \"MyViewController.swift\" or \"MyViewController\")\n\n- Note: Automatically handles file extension and path construction\n- Important: Deletion is permanent and cannot be undone",
            "key.doc.column" : 24,
            "key.doc.comment" : "Deletes a specific log file by its base filename for targeted log management.\n\nProvides granular control over log file management by allowing removal of individual\nlog files based on their source component or module. This method is useful for\ncomponent-specific cleanup or when addressing storage concerns for particular modules.\n\nThe deletion process:\n1. **URL Resolution**: Constructs the complete file path from the base filename\n2. **Existence Check**: Verifies the file exists before attempting deletion\n3. **Safe Removal**: Performs deletion with error handling to prevent crashes\n4. **Extension Handling**: Automatically manages file extension requirements\n\n- Parameter fileName: The base name of the log file to delete\n  (e.g., \"MyViewController.swift\" or \"MyViewController\")\n\n- Note: Automatically handles file extension and path construction\n- Important: Deletion is permanent and cannot be undone",
            "key.doc.declaration" : "@MainActor public static func deleteLogFile(named fileName: String)",
            "key.doc.discussion" : [
              {
                "Para" : "Provides granular control over log file management by allowing removal of individual log files based on their source component or module. This method is useful for component-specific cleanup or when addressing storage concerns for particular modules."
              },
              {
                "Para" : "The deletion process:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"401\" column=\"24\"><Name>deleteLogFile(named:)<\/Name><USR>s:12SimpleLoggerAAC13deleteLogFile5namedySS_tFZ<\/USR><Declaration>@MainActor public static func deleteLogFile(named fileName: String)<\/Declaration><CommentParts><Abstract><Para>Deletes a specific log file by its base filename for targeted log management.<\/Para><\/Abstract><Parameters><Parameter><Name>fileName<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The base name of the log file to delete (e.g., “MyViewController.swift” or “MyViewController”)<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Provides granular control over log file management by allowing removal of individual log files based on their source component or module. This method is useful for component-specific cleanup or when addressing storage concerns for particular modules.<\/Para><Para>The deletion process:<\/Para><List-Number><Item><Para><bold>URL Resolution<\/bold>: Constructs the complete file path from the base filename<\/Para><\/Item><Item><Para><bold>Existence Check<\/bold>: Verifies the file exists before attempting deletion<\/Para><\/Item><Item><Para><bold>Safe Removal<\/bold>: Performs deletion with error handling to prevent crashes<\/Para><\/Item><Item><Para><bold>Extension Handling<\/bold>: Automatically manages file extension requirements<\/Para><\/Item><\/List-Number><Note><Para>Automatically handles file extension and path construction<\/Para><\/Note><Important><Para>Deletion is permanent and cannot be undone<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 401,
            "key.doc.name" : "deleteLogFile(named:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The base name of the log file to delete (e.g., “MyViewController.swift” or “MyViewController”)"
                  }
                ],
                "name" : "fileName"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1036,
            "key.docoffset" : 19388,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>deleteLogFile<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>named<\/decl.var.parameter.argument_label> <decl.var.parameter.name>fileName<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 290,
            "key.line" : 401,
            "key.modulename" : "SimpleLogger",
            "key.name" : "deleteLogFile(named:)",
            "key.namelength" : 37,
            "key.nameoffset" : 20447,
            "key.offset" : 20435,
            "key.parsed_declaration" : "public static func deleteLogFile(named fileName: String)",
            "key.parsed_scope.end" : 407,
            "key.parsed_scope.start" : 401,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 402,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 20499,
                "key.offset" : 20495,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 402,
                "key.parsed_scope.start" : 402,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC13deleteLogFile5namedySS_tFZ11fileManagerL_So06NSFileH0Cvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> (String) -> ()",
            "key.typeusr" : "$s5namedySS_tcD",
            "key.usr" : "s:12SimpleLoggerAAC13deleteLogFile5namedySS_tFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> public static func gatherFiles() -&gt; <Type usr=\"s:10Foundation4DataV\">Data<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 23057
              }
            ],
            "key.bodylength" : 1629,
            "key.bodyoffset" : 23100,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Creates a compressed ZIP archive containing all log files for export or transmission.\n\nGenerates a complete collection of all JSON log files in a single ZIP archive, making it\nconvenient for sharing logs with support teams, backing up log data, or transmitting\ndiagnostic information. This method handles the entire archival process automatically,\nincluding temporary file management and cleanup.\n\nThe archival process includes:\n1. **Directory Enumeration**: Scans the logging directory for all JSON log files\n2. **Archive Creation**: Creates a temporary ZIP file with a unique identifier\n3. **File Compression**: Adds each log file to the archive with DEFLATE compression\n4. **Data Extraction**: Reads the completed ZIP archive into memory as Data\n5. **Cleanup**: Automatically removes temporary files after processing\n\n## Use Cases\n- **Bug Reports**: Attach comprehensive log data to support tickets\n- **Backup Operations**: Create portable backups of application logs\n- **Remote Diagnostics**: Send complete log history to development teams\n- **Compliance**: Generate audit trails for regulatory requirements\n\n## Performance Considerations\nThis method loads all log files into memory simultaneously and may consume significant\nresources if log files are large or numerous. Consider using `clearLogs()` periodically\nto manage log file sizes.\n\n- Returns: Compressed ZIP archive as `Data` containing all log files, or `nil` if:\n  - Document directory is inaccessible\n  - Logging directory doesn't exist or is empty\n  - ZIP archive creation fails\n  - File I\/O operations encounter errors\n\n## Example\n```swift\nif let zipData = SimpleLogger.gatherFiles() {\n    \/\/ Save to file, share via email, or upload to server\n    try zipData.write(to: exportURL)\n} else {\n    print(\"No log files available for export\")\n}\n```\n\n- Note: Creates and automatically cleans up temporary files during the archival process\n- Important: Returns `nil` if no log files exist or if any step in the process fails",
            "key.doc.column" : 24,
            "key.doc.comment" : "Creates a compressed ZIP archive containing all log files for export or transmission.\n\nGenerates a complete collection of all JSON log files in a single ZIP archive, making it\nconvenient for sharing logs with support teams, backing up log data, or transmitting\ndiagnostic information. This method handles the entire archival process automatically,\nincluding temporary file management and cleanup.\n\nThe archival process includes:\n1. **Directory Enumeration**: Scans the logging directory for all JSON log files\n2. **Archive Creation**: Creates a temporary ZIP file with a unique identifier\n3. **File Compression**: Adds each log file to the archive with DEFLATE compression\n4. **Data Extraction**: Reads the completed ZIP archive into memory as Data\n5. **Cleanup**: Automatically removes temporary files after processing\n\n## Use Cases\n- **Bug Reports**: Attach comprehensive log data to support tickets\n- **Backup Operations**: Create portable backups of application logs\n- **Remote Diagnostics**: Send complete log history to development teams\n- **Compliance**: Generate audit trails for regulatory requirements\n\n## Performance Considerations\nThis method loads all log files into memory simultaneously and may consume significant\nresources if log files are large or numerous. Consider using `clearLogs()` periodically\nto manage log file sizes.\n\n- Returns: Compressed ZIP archive as `Data` containing all log files, or `nil` if:\n  - Document directory is inaccessible\n  - Logging directory doesn't exist or is empty\n  - ZIP archive creation fails\n  - File I\/O operations encounter errors\n\n## Example\n```swift\nif let zipData = SimpleLogger.gatherFiles() {\n    \/\/ Save to file, share via email, or upload to server\n    try zipData.write(to: exportURL)\n} else {\n    print(\"No log files available for export\")\n}\n```\n\n- Note: Creates and automatically cleans up temporary files during the archival process\n- Important: Returns `nil` if no log files exist or if any step in the process fails",
            "key.doc.declaration" : "@MainActor public static func gatherFiles() -> Data?",
            "key.doc.discussion" : [
              {
                "Para" : "Generates a complete collection of all JSON log files in a single ZIP archive, making it convenient for sharing logs with support teams, backing up log data, or transmitting diagnostic information. This method handles the entire archival process automatically, including temporary file management and cleanup."
              },
              {
                "Para" : "The archival process includes:"
              },
              {
                "List-Number" : ""
              },
              {
                "List-Bullet" : ""
              },
              {
                "Para" : "This method loads all log files into memory simultaneously and may consume significant resources if log files are large or numerous. Consider using `clearLogs()` periodically to manage log file sizes."
              },
              {
                "CodeListing" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"452\" column=\"24\"><Name>gatherFiles()<\/Name><USR>s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ<\/USR><Declaration>@MainActor public static func gatherFiles() -&gt; Data?<\/Declaration><CommentParts><Abstract><Para>Creates a compressed ZIP archive containing all log files for export or transmission.<\/Para><\/Abstract><ResultDiscussion><Para>Compressed ZIP archive as <codeVoice>Data<\/codeVoice> containing all log files, or <codeVoice>nil<\/codeVoice> if:<\/Para><List-Bullet><Item><Para>Document directory is inaccessible<\/Para><\/Item><Item><Para>Logging directory doesn’t exist or is empty<\/Para><\/Item><Item><Para>ZIP archive creation fails<\/Para><\/Item><Item><Para>File I\/O operations encounter errors<\/Para><\/Item><\/List-Bullet><\/ResultDiscussion><Discussion><Para>Generates a complete collection of all JSON log files in a single ZIP archive, making it convenient for sharing logs with support teams, backing up log data, or transmitting diagnostic information. This method handles the entire archival process automatically, including temporary file management and cleanup.<\/Para><Para>The archival process includes:<\/Para><List-Number><Item><Para><bold>Directory Enumeration<\/bold>: Scans the logging directory for all JSON log files<\/Para><\/Item><Item><Para><bold>Archive Creation<\/bold>: Creates a temporary ZIP file with a unique identifier<\/Para><\/Item><Item><Para><bold>File Compression<\/bold>: Adds each log file to the archive with DEFLATE compression<\/Para><\/Item><Item><Para><bold>Data Extraction<\/bold>: Reads the completed ZIP archive into memory as Data<\/Para><\/Item><Item><Para><bold>Cleanup<\/bold>: Automatically removes temporary files after processing<\/Para><\/Item><\/List-Number><rawHTML><![CDATA[<h2>]]><\/rawHTML>Use Cases<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><List-Bullet><Item><Para><bold>Bug Reports<\/bold>: Attach comprehensive log data to support tickets<\/Para><\/Item><Item><Para><bold>Backup Operations<\/bold>: Create portable backups of application logs<\/Para><\/Item><Item><Para><bold>Remote Diagnostics<\/bold>: Send complete log history to development teams<\/Para><\/Item><Item><Para><bold>Compliance<\/bold>: Generate audit trails for regulatory requirements<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h2>]]><\/rawHTML>Performance Considerations<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>This method loads all log files into memory simultaneously and may consume significant resources if log files are large or numerous. Consider using <codeVoice>clearLogs()<\/codeVoice> periodically to manage log file sizes.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Example<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let zipData = SimpleLogger.gatherFiles() {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Save to file, share via email, or upload to server]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    try zipData.write(to: exportURL)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"No log files available for export\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>Creates and automatically cleans up temporary files during the archival process<\/Para><\/Note><Important><Para>Returns <codeVoice>nil<\/codeVoice> if no log files exist or if any step in the process fails<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 452,
            "key.doc.name" : "gatherFiles()",
            "key.doc.result_discussion" : [
              {
                "Para" : "Compressed ZIP archive as `Data` containing all log files, or `nil` if:"
              },
              {
                "List-Bullet" : ""
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 2318,
            "key.docoffset" : 20735,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>gatherFiles<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 1666,
            "key.line" : 452,
            "key.modulename" : "SimpleLogger",
            "key.name" : "gatherFiles()",
            "key.namelength" : 13,
            "key.nameoffset" : 23076,
            "key.offset" : 23064,
            "key.parsed_declaration" : "public static func gatherFiles() -> Data?",
            "key.parsed_scope.end" : 487,
            "key.parsed_scope.start" : 452,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 453,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 23113,
                "key.offset" : 23109,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 453,
                "key.parsed_scope.start" : 453,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ11fileManagerL_So06NSFileH0Cvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let logsDir: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>logsDir<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 66,
                "key.line" : 455,
                "key.modulename" : "SimpleLogger",
                "key.name" : "logsDir",
                "key.namelength" : 7,
                "key.nameoffset" : 23276,
                "key.offset" : 23272,
                "key.parsed_declaration" : "let logsDir = docsURL.appendingPathComponent(loggingDirectoryName)",
                "key.parsed_scope.end" : 455,
                "key.parsed_scope.start" : 455,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ7logsDirL_AD3URLVvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let logFiles: [<Type usr=\"s:10Foundation3URLV\">URL<\/Type>]<\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>logFiles<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 89,
                "key.line" : 458,
                "key.modulename" : "SimpleLogger",
                "key.name" : "logFiles",
                "key.namelength" : 8,
                "key.nameoffset" : 23472,
                "key.offset" : 23468,
                "key.parsed_declaration" : "let logFiles = enumerator.compactMap { $0 as? URL }.filter { $0.pathExtension == \"json\" }",
                "key.parsed_scope.end" : 458,
                "key.parsed_scope.start" : 458,
                "key.reusingastcontext" : false,
                "key.typename" : "[URL]",
                "key.typeusr" : "$sSay10Foundation3URLVGD",
                "key.usr" : "s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ03logD0L_SayAD3URLVGvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let tempZipURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tempZipURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 112,
                "key.line" : 461,
                "key.modulename" : "SimpleLogger",
                "key.name" : "tempZipURL",
                "key.namelength" : 10,
                "key.nameoffset" : 23631,
                "key.offset" : 23627,
                "key.parsed_declaration" : "let tempZipURL = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(UUID().uuidString + \".zip\")",
                "key.parsed_scope.end" : 461,
                "key.parsed_scope.start" : 461,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ10tempZipURLL_AD0I0Vvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let archive: <Type usr=\"s:13ZIPFoundation7ArchiveC\">Archive<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>archive<\/decl.name>: <decl.var.type><ref.class usr=\"s:13ZIPFoundation7ArchiveC\">Archive<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 20,
                "key.line" : 464,
                "key.modulename" : "SimpleLogger",
                "key.name" : "archive",
                "key.namelength" : 7,
                "key.nameoffset" : 23815,
                "key.offset" : 23811,
                "key.parsed_declaration" : "let archive: Archive",
                "key.parsed_scope.end" : 464,
                "key.parsed_scope.start" : 464,
                "key.reusingastcontext" : false,
                "key.typename" : "Archive",
                "key.typeusr" : "$s13ZIPFoundation7ArchiveCD",
                "key.usr" : "s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ7archiveL_13ZIPFoundation7ArchiveCvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> () -> Data?",
            "key.typeusr" : "$s10Foundation4DataVSgycD",
            "key.usr" : "s:12SimpleLoggerAAC11gatherFiles10Foundation4DataVSgyFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>@<Type usr=\"s:ScM\">MainActor<\/Type> private static func logFileURL(forFileName filename: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:10Foundation3URLV\">URL<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 25989
              }
            ],
            "key.bodylength" : 492,
            "key.bodyoffset" : 26059,
            "key.column" : 25,
            "key.decl_lang" : "source.lang.swift",
            "key.doc_comment" : "Constructs the complete file URL for a log file with automatic directory management.\n\nProvides centralized file path resolution for log files, including automatic creation\nof the logging directory structure when needed. This method ensures consistent file\norganization and handles the infrastructure requirements for log persistence.\n\nThe URL construction process:\n1. **Document Directory**: Locates the application's document directory\n2. **Logging Subdirectory**: Constructs path to the dedicated logging folder\n3. **Directory Creation**: Creates the logging directory if it doesn't exist\n4. **File Path Assembly**: Combines directory path with filename and JSON extension\n5. **Error Handling**: Returns nil if document directory is inaccessible\n\n- Parameter filename: The base name of the log file (without extension)\n\n- Returns: Complete URL to the log file, or `nil` if the document directory\n          cannot be accessed or directory creation fails\n\n- Note: Automatically appends `.json` extension to the provided filename\n- Important: Creates logging directory structure if it doesn't exist",
            "key.doc.column" : 25,
            "key.doc.comment" : "Constructs the complete file URL for a log file with automatic directory management.\n\nProvides centralized file path resolution for log files, including automatic creation\nof the logging directory structure when needed. This method ensures consistent file\norganization and handles the infrastructure requirements for log persistence.\n\nThe URL construction process:\n1. **Document Directory**: Locates the application's document directory\n2. **Logging Subdirectory**: Constructs path to the dedicated logging folder\n3. **Directory Creation**: Creates the logging directory if it doesn't exist\n4. **File Path Assembly**: Combines directory path with filename and JSON extension\n5. **Error Handling**: Returns nil if document directory is inaccessible\n\n- Parameter filename: The base name of the log file (without extension)\n\n- Returns: Complete URL to the log file, or `nil` if the document directory\n          cannot be accessed or directory creation fails\n\n- Note: Automatically appends `.json` extension to the provided filename\n- Important: Creates logging directory structure if it doesn't exist",
            "key.doc.declaration" : "@MainActor private static func logFileURL(forFileName filename: String) -> URL?",
            "key.doc.discussion" : [
              {
                "Para" : "Provides centralized file path resolution for log files, including automatic creation of the logging directory structure when needed. This method ensures consistent file organization and handles the infrastructure requirements for log persistence."
              },
              {
                "Para" : "The URL construction process:"
              },
              {
                "List-Number" : ""
              },
              {
                "Note" : ""
              },
              {
                "Important" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift\" line=\"509\" column=\"25\"><Name>logFileURL(forFileName:)<\/Name><USR>s:12SimpleLoggerAAC10logFileURL33_61A698F9C262E84479D734AD422F70E3LL03forD4Name10Foundation0E0VSgSS_tFZ<\/USR><Declaration>@MainActor private static func logFileURL(forFileName filename: String) -&gt; URL?<\/Declaration><CommentParts><Abstract><Para>Constructs the complete file URL for a log file with automatic directory management.<\/Para><\/Abstract><Parameters><Parameter><Name>filename<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The base name of the log file (without extension)<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Complete URL to the log file, or <codeVoice>nil<\/codeVoice> if the document directory cannot be accessed or directory creation fails<\/Para><\/ResultDiscussion><Discussion><Para>Provides centralized file path resolution for log files, including automatic creation of the logging directory structure when needed. This method ensures consistent file organization and handles the infrastructure requirements for log persistence.<\/Para><Para>The URL construction process:<\/Para><List-Number><Item><Para><bold>Document Directory<\/bold>: Locates the application’s document directory<\/Para><\/Item><Item><Para><bold>Logging Subdirectory<\/bold>: Constructs path to the dedicated logging folder<\/Para><\/Item><Item><Para><bold>Directory Creation<\/bold>: Creates the logging directory if it doesn’t exist<\/Para><\/Item><Item><Para><bold>File Path Assembly<\/bold>: Combines directory path with filename and JSON extension<\/Para><\/Item><Item><Para><bold>Error Handling<\/bold>: Returns nil if document directory is inaccessible<\/Para><\/Item><\/List-Number><Note><Para>Automatically appends <codeVoice>.json<\/codeVoice> extension to the provided filename<\/Para><\/Note><Important><Para>Creates logging directory structure if it doesn’t exist<\/Para><\/Important><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 509,
            "key.doc.name" : "logFileURL(forFileName:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The base name of the log file (without extension)"
                  }
                ],
                "name" : "filename"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "Complete URL to the log file, or `nil` if the document directory cannot be accessed or directory creation fails"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1249,
            "key.docoffset" : 24736,
            "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@<ref.class usr=\"s:ScM\">MainActor<\/ref.class><\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>logFileURL<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>forFileName<\/decl.var.parameter.argument_label> <decl.var.parameter.name>filename<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 555,
            "key.line" : 509,
            "key.modulename" : "SimpleLogger",
            "key.name" : "logFileURL(forFileName:)",
            "key.namelength" : 40,
            "key.nameoffset" : 26009,
            "key.offset" : 25997,
            "key.parsed_declaration" : "private static func logFileURL(forFileName filename: String) -> URL?",
            "key.parsed_scope.end" : 519,
            "key.parsed_scope.start" : 509,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let fileManager: <Type usr=\"c:objc(cs)NSFileManager\">FileManager<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fileManager<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSFileManager\">FileManager<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.line" : 510,
                "key.modulename" : "SimpleLogger",
                "key.name" : "fileManager",
                "key.namelength" : 11,
                "key.nameoffset" : 26072,
                "key.offset" : 26068,
                "key.parsed_declaration" : "let fileManager = FileManager.default",
                "key.parsed_scope.end" : 510,
                "key.parsed_scope.start" : 510,
                "key.reusingastcontext" : false,
                "key.typename" : "FileManager",
                "key.typeusr" : "$sSo13NSFileManagerCD",
                "key.usr" : "s:12SimpleLoggerAAC10logFileURL33_61A698F9C262E84479D734AD422F70E3LL03forD4Name10Foundation0E0VSgSS_tFZ11fileManagerL_So06NSFileR0Cvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let dirURL: <Type usr=\"s:10Foundation3URLV\">URL<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/Users\/pedrocavaleiro\/Repos\/Personal\/SimpleLogger\/Sources\/SimpleLogger\/SimpleLogger.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dirURL<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation3URLV\">URL<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 70,
                "key.line" : 514,
                "key.modulename" : "SimpleLogger",
                "key.name" : "dirURL",
                "key.namelength" : 6,
                "key.nameoffset" : 26255,
                "key.offset" : 26251,
                "key.parsed_declaration" : "let dirURL = docsURL.appendingPathComponent(Self.loggingDirectoryName)",
                "key.parsed_scope.end" : 514,
                "key.parsed_scope.start" : 514,
                "key.reusingastcontext" : false,
                "key.typename" : "URL",
                "key.typeusr" : "$s10Foundation3URLVD",
                "key.usr" : "s:12SimpleLoggerAAC10logFileURL33_61A698F9C262E84479D734AD422F70E3LL03forD4Name10Foundation0E0VSgSS_tFZ03dirE0L_AHvp"
              }
            ],
            "key.typename" : "(SimpleLogger.Type) -> (String) -> URL?",
            "key.typeusr" : "$s11forFileName10Foundation3URLVSgSS_tcD",
            "key.usr" : "s:12SimpleLoggerAAC10logFileURL33_61A698F9C262E84479D734AD422F70E3LL03forD4Name10Foundation0E0VSgSS_tFZ"
          }
        ],
        "key.typename" : "SimpleLogger.Type",
        "key.typeusr" : "$s12SimpleLoggerAACmD",
        "key.usr" : "s:12SimpleLoggerAAC"
      }
    ]
  }
}]
