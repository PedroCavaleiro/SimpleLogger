//
//  CustomFormField.swift
//  SimpleLogger
//
//  Created by Pedro Cavaleiro on 14/09/2025.
//
//  Docs Generated by Claude Sonnet 4
//

import SwiftUI

/// A protocol that defines the requirements for custom form fields in the SimpleLogger UI.
///
/// `CustomFormField` allows you to create custom SwiftUI views that can be integrated
/// into forms while providing a standardized way to access their key identifier and current value.
/// This protocol is essential for building dynamic forms where field values need to be collected
/// and processed uniformly.
///
/// ## Conforming to CustomFormField
///
/// To create a custom form field, implement both required properties:
///
/// ```swift
/// struct EmailField: CustomFormField {
///     @State private var email = ""
///     
///     var fieldKey: String { "email" }
///     var fieldValue: String { email }
///     
///     var body: some View {
///         TextField("Enter email", text: $email)
///             .textFieldStyle(RoundedBorderTextFieldStyle())
///             .keyboardType(.emailAddress)
///     }
/// }
/// ```
///
/// ## Topics
///
/// ### Required Properties
///
/// - ``fieldKey``
/// - ``fieldValue``
public protocol CustomFormField: View {
    
    /// The unique key identifier for this form field.
    ///
    /// This key is used to identify the field when collecting form data and should be
    /// unique within the context of a single form. The key is typically used as a
    /// dictionary key when processing form submissions.
    ///
    /// ## Example
    ///
    /// ```swift
    /// var fieldKey: String { "username" }
    /// ```
    var fieldKey: String { get }
    
    /// The current value of the field represented as a string.
    ///
    /// This property should return the current state of the form field as a string,
    /// regardless of the internal data type. For complex data types, implement
    /// appropriate string conversion logic.
    ///
    /// ## Example
    ///
    /// ```swift
    /// @State private var selectedDate = Date()
    /// 
    /// var fieldValue: String { 
    ///     DateFormatter.iso8601.string(from: selectedDate)
    /// }
    /// ```
    var fieldValue: String { get }
}

/// A type-erased wrapper for custom form fields that handles state management and value extraction.
///
/// `CustomFormFieldWrapper` provides a way to store and manage different types of custom form fields
/// in a uniform manner. It encapsulates the field's view, key, and value extraction logic, allowing
/// collections of heterogeneous form fields to be handled consistently.
///
/// This wrapper is particularly useful when building dynamic forms where the number and types of
/// fields may vary at runtime, or when you need to store form fields in collections.
///
/// ## Usage
///
/// ```swift
/// let emailField = EmailField()
/// let wrapper = CustomFormFieldWrapper(field: emailField)
/// 
/// // Access the wrapped properties
/// print(wrapper.key)        // "email"
/// print(wrapper.getValue()) // Current email value
/// ```
///
/// ## Topics
///
/// ### Creating a Wrapper
///
/// - ``init(field:)``
///
/// ### Accessing Field Data
///
/// - ``key``
/// - ``view``
/// - ``getValue()``
@MainActor
public struct CustomFormFieldWrapper {
    
    /// The unique key identifier from the wrapped form field.
    ///
    /// This property provides direct access to the `fieldKey` of the wrapped
    /// `CustomFormField` without needing to interact with the original field instance.
    public let key: String
    
    /// The type-erased SwiftUI view representation of the form field.
    ///
    /// This property contains the visual representation of the form field, wrapped
    /// in an `AnyView` to allow storage of different field types in the same collection.
    /// Use this view when rendering the field in your form interface.
    public let view: AnyView
    
    /// A closure that returns the current value of the form field as a string.
    ///
    /// This closure provides access to the field's current value without maintaining
    /// a strong reference to the original field instance. Call this closure whenever
    /// you need to retrieve the field's current state.
    public let getValue: () -> String
    
    /// Creates a new wrapper for the specified custom form field.
    ///
    /// This initializer takes any view that conforms to `CustomFormField` and creates
    /// a type-erased wrapper that can be stored alongside other wrapped fields regardless
    /// of their concrete types.
    ///
    /// - Parameter field: A view conforming to `CustomFormField` that will be wrapped.
    ///
    /// ## Example
    ///
    /// ```swift
    /// struct AgeField: CustomFormField {
    ///     @State private var age = ""
    ///     
    ///     var fieldKey: String { "age" }
    ///     var fieldValue: String { age }
    ///     
    ///     var body: some View {
    ///         TextField("Age", text: $age)
    ///             .keyboardType(.numberPad)
    ///     }
    /// }
    ///
    /// let ageField = AgeField()
    /// let wrapper = CustomFormFieldWrapper(field: ageField)
    /// ```
    public init<T: CustomFormField>(field: T) {
        self.key = field.fieldKey
        self.view = AnyView(field)
        self.getValue = { field.fieldValue }
    }
}
