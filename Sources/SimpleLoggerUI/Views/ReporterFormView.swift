//
//  ReporterFormView.swift
//  SimpleLogger
//
//  Created by Pedro Cavaleiro on 14/09/2025.
//
//  Docs Generated by Claude Sonnet 4
//

import SwiftUI
import SimpleLogger
import ExtendedSwift

fileprivate typealias Logger = SimpleLogger

/// A SwiftUI view that renders a comprehensive bug reporting form interface.
///
/// `ReporterFormView` provides a structured form for collecting bug reports from users,
/// including a main description field, optional custom form fields, automatically
/// collected device information, and log files information. The view is highly configurable
/// through a ``ReporterViewConfiguration`` object.
///
/// ## Overview
///
/// The form consists of up to four main sections:
/// 1. **Bug Description Section**: A text editor where users describe the issue
/// 2. **Custom Fields Section**: Optional additional input fields (if configured)
/// 3. **Pre-filled Data Section**: Automatically collected device and app information (if enabled)
/// 4. **Log Files Information Section**: Details about log files that will be included in the report (if enabled)
///
/// ## Usage
///
/// ### Basic Usage
///
/// ```swift
/// let config = ReporterViewConfiguration(
///     sendAction: { issueText, preFilledData, customFields, logInfo in
///         // Handle the bug report submission
///         print("Issue: \(issueText)")
///         // Process the collected data and send the report
///     }
/// )
///
/// ReporterFormView(configuration: config)
/// ```
///
/// ### Advanced Usage with Custom Fields and Log Files
///
/// ```swift
/// let config = ReporterViewConfiguration(
///     navigationBarTitle: "Report Problem",
///     customFields: [
///         CustomFormFieldWrapper(field: EmailFormField()),
///         CustomFormFieldWrapper(field: CategoryField())
///     ],
///     showPrefilledDataSection: true,
///     showLogFilesInformation: true,
///     sendAction: { issueText, preFilledData, customFields, logInfo in
///         // Handle the bug report submission with all collected data
///         submitBugReport(
///             description: issueText,
///             deviceInfo: preFilledData,
///             customData: customFields,
///             logs: logInfo.1
///         )
///     }
/// )
///
/// ReporterFormView(configuration: config)
/// ```
///
/// ## Important
/// The `ReporterFormView` requires a custom `sendAction` closure to be provided in the configuration.
/// There is no default send report implementation - you must handle the report submission yourself
/// by implementing the `sendAction` closure in your `ReporterViewConfiguration`.
///
/// ## Features
///
/// - **Self-Contained State**: The view manages its own issue text state internally
/// - **Responsive Text Input**: The bug description field uses a `TextEditor` with placeholder text
/// - **Dynamic Sections**: Sections appear/disappear based on configuration settings
/// - **Localized Content**: All text content supports localization through the `localized()` extension
/// - **Sorted Data Display**: Pre-filled data and log files information are automatically sorted alphabetically by key
/// - **Navigation Integration**: Includes navigation title and works within navigation stacks
/// - **Log Files Display**: Shows detailed information about log files that will be included in bug reports
///
/// ## Topics
///
/// ### Creating a Reporter Form View
///
/// - ``init(configuration:)``
///
/// ### View Properties
///
/// - ``body``
/// - ``issueText``
/// - ``configuration``
public struct ReporterFormView: View {
    
    /// The bug description text entered by the user.
    ///
    /// This private state property manages the text content of the bug description
    /// text editor internally. The text is initialized as empty and is displayed
    /// in a `TextEditor` with placeholder text when empty.
    ///
    /// The text content is automatically passed to the `sendAction` closure when
    /// the user submits the report.
    @State private var issueText: String = ""
    
    /// The configuration object that defines the form's appearance and behavior.
    ///
    /// This constant contains all customization options for the form, including
    /// text content, section visibility, custom fields, and pre-filled data settings.
    /// The configuration is set during initialization and remains constant throughout
    /// the view's lifecycle.
    ///
    /// ## See Also
    /// - ``ReporterViewConfiguration``
    public let configuration: ReporterViewConfiguration
    
    /// The main view body that renders the bug reporting form.
    ///
    /// The body creates a `NavigationStack` containing a `Form` with up to four sections:
    /// - A bug description section with a text editor
    /// - An optional custom fields section (if configured)
    /// - An optional pre-filled data section (if enabled and data exists)
    /// - An optional log files information section (if enabled and log files data exists)
    ///
    /// All text content is localized using the `localized()` extension, and sections
    /// are conditionally displayed based on the configuration settings. The log files
    /// section displays information about log files that will be automatically included
    /// in the bug report for debugging purposes.
    ///
    /// A "Send" button is added to the trailing navigation bar item that handles report submission.
    public var body: some View {
        Form {
            // Bug Description Section
            Section {
                ZStack(alignment: .leading) {
                    if issueText.isEmpty {
                        Text(configuration.bgPlaceholderText.localized())
                            .foregroundStyle(.secondary)
                            .allowsHitTesting(false)
                            .padding(.leading, 3)
                    }
                    
                    TextEditor(text: $issueText)
                        .multilineTextAlignment(.leading)
                        .lineLimit(6)
                }
            } header: {
                Text(configuration.bgSectionHeader.localized())
            } footer: {
                Text(configuration.bgSectionFooter.localized())
            }
            
            // Custom form fields section
            if let customFields = configuration.customFields, !customFields.isEmpty {
                Section {
                    ForEach(customFields.indices, id: \.self) { index in
                        customFields[index].view
                    }
                } header: {
                    Text(configuration.customFieldsSectionHeader.localized())
                } footer: {
                    Text(configuration.customFieldsSectionFooter.localized())
                }
            }
            
            // Pre-filled data section
            if configuration.showPrefilledDataSection && !configuration.preFilledData.isEmpty {
                Section {
                    ForEach(configuration.preFilledData.sorted(by: { $0.key < $1.key }), id: \.key) { key, value in
                        configuration.preFilledDataComponentBuilder(key, value)
                    }
                } header: {
                    Text(configuration.preFilledDataSectionHeader.localized())
                } footer: {
                    Text(configuration.preFilledDataSectionFooter.localized())
                }
            }
            
            // Log files information section
            if configuration.showLogFilesInformation {
                Section {
                    let (logCount, logSize) = Logger.logFileStats()
                    if logCount <= 0 {
                        Text("No log files found.")
                            .foregroundStyle(.secondary)
                    } else {
                        PreFilledDataComponent {
                            Text("Log Files Count:")
                        } value: {
                            Text("\(logCount) files \(logSize.formatted(.byteCount(style: .file)))")
                                .foregroundStyle(.secondary)
                        }
                    }
                } header: {
                    Text(configuration.logFilesInformationSectionHeader.localized())
                } footer: {
                    Text(configuration.logFilesInformationSectionFooter.localized())
                }
            }
            
        }
        .navigationTitle(configuration.navigationBarTitle.localized())
        #if !os(macOS)
        .navigationBarTitleDisplayMode(.inline)
        #endif
        .toolbar {
            #if os(macOS)
            ToolbarItem(placement: .automatic) {
                Button(configuration.sendButtonText.localized()) {
                    handleSendReport()
                }
            }
            #else
            ToolbarItem(placement: .topBarTrailing) {
                Button(configuration.sendButtonText.localized()) {
                    handleSendReport()
                }
            }
            #endif
        }
    }
    
    /// Handles the send report action by calling the custom action closure provided in the configuration.
    ///
    /// This method collects all form data and passes it to the custom action closure
    /// provided in the configuration. The configuration must include a `sendAction` closure
    /// to handle the report submission.
    ///
    /// The following data is collected and passed to the action:
    /// - Issue description text from the text editor
    /// - Pre-filled data (if `sendPreFilledData` is enabled)
    /// - Custom field values
    /// - Log file statistics and files (count, total size, and file data)
    ///
    /// ## Important
    /// The configuration's `sendAction` closure must be set, as there is no default
    /// send report implementation. If no custom action is provided, the method will
    /// execute without performing any send operation.
    private func handleSendReport() {
        
        // Save snapshots
        if let snapshotItems = configuration.snapshotObjects {
            for item in snapshotItems {
                Logger.snapshot(item)
            }
        }
        
        // Collect all form data
        let customFieldValues = configuration.getCustomFieldValues()
        let preFilledDataToSend = configuration.sendPreFilledData ? configuration.preFilledData : [:]
        let (logCount, logSize) = Logger.logFileStats()
        let logs = Logger.gatherFiles()
        let logStats = "\(logCount) files (\(logSize.formatted(.byteCount(style: .file))))"
        
        // Call custom action if provided, otherwise do nothing
        configuration.sendAction?(issueText, preFilledDataToSend, customFieldValues, (logStats, logs))
    }
}

#Preview {
    
    /// Preview configuration for development and testing.
    let config = ReporterViewConfiguration()
    
    ReporterFormView(
        configuration: config
    )
}
