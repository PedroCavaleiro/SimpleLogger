//
//  SimpleLogger+Entry.swift
//  SimpleLogger
//
//  Created by Pedro Cavaleiro on 11/09/2025.
//
//  Docs Generated by Claude Sonnet 4
//

import Foundation

/// Log entry model providing comprehensive logging information with source tracking and diagnostic capabilities.
///
/// `LogEntry` represents individual log entries with comprehensive diagnostic information including
/// message content, source code tracking, log level classification, and temporal coordination. It provides
/// essential logging capabilities, debugging assistance, and diagnostic coordination for comprehensive
/// system monitoring and troubleshooting workflows.
///
/// ## Features
///
/// - **Comprehensive Logging**: Complete log entry information with message, level, and source tracking
/// - **Source Code Tracking**: File, function, and line number tracking for precise debugging assistance
/// - **Object Context**: Optional object name and data for contextual debugging and analysis
/// - **Temporal Coordination**: Timestamp tracking for chronological log analysis and monitoring
/// - **Level Classification**: Log level categorization for filtering and severity analysis
/// - **Diagnostic Support**: Structured logging for development and production troubleshooting
///
/// ## Usage Context
///
/// This model is used throughout the application for comprehensive logging, debugging assistance,
/// and system monitoring. It provides essential diagnostic information for development troubleshooting
/// and integrates with logging systems for comprehensive application monitoring and analysis.
///
/// ## Environment Requirements
///
/// - Requires Foundation framework for core data structures and Codable functionality
/// - Integrates with Logging system for log level classification and management
/// - Compatible with file-based logging systems for log persistence and analysis
/// - Supports development and production logging workflows with source tracking
///
/// ## Properties
///
/// - `message`: String containing the primary log message and information content
/// - `objectName`: Optional string containing related object name for contextual debugging
/// - `objectData`: Optional string containing related object data for diagnostic analysis
/// - `level`: LogLevel enumeration providing log severity classification and filtering
/// - `isSnapshot`: Defines if the entry is a snapshot, the tool that reads the snapshot displays it differently
/// - `file`: String containing source file name for debugging location identification
/// - `function`: String containing source function name for debugging context
/// - `line`: Integer containing source line number for precise debugging location
/// - `timestamp`: Date providing temporal information for chronological log analysis
///
/// ## Initialization Parameters
///
/// - Parameters:
///   - message: String containing the primary log message and diagnostic information
///   - objectName: Optional string containing related object name for contextual analysis
///   - objectData: Optional string containing related object data for debugging assistance
///   - level: LogLevel providing log severity classification and filtering capabilities
///   - isSnapshot: Sets if the file is a snapshot or not
///   - file: String containing source file name for debugging location tracking
///   - function: String containing source function name for debugging context
///   - line: Integer containing source line number for precise location identification
///   - timestamp: Date providing temporal information for chronological coordination
public struct LogEntry: Codable {
    
    /// Primary log message providing comprehensive diagnostic information and logging content.
    ///
    /// This string property contains the main log message with diagnostic information, enabling
    /// comprehensive logging, troubleshooting assistance, and system monitoring
    /// for application debugging and operational analysis workflows.
    public let message: String
    
    /// Optional related object name providing contextual debugging information and object identification.
    ///
    /// This optional string property contains the name of the related object for contextual debugging,
    /// enabling object-specific analysis, contextual troubleshooting, and enhanced diagnostic
    /// coordination for comprehensive logging and debugging workflows.
    public var objectName: String? = nil
    
    /// Optional related object data providing detailed diagnostic information and analysis support.
    ///
    /// This optional string property contains related object data for detailed diagnostic analysis,
    /// enabling data inspection, object state debugging, and comprehensive troubleshooting
    /// assistance for logging and diagnostic coordination workflows.
    public var objectData: String? = nil
    
    /// Log level classification providing severity categorization and filtering capabilities.
    ///
    /// This LogLevel property provides log severity classification and filtering coordination,
    /// enabling log level management, severity-based analysis, and structured logging
    /// for comprehensive system monitoring and troubleshooting workflows.
    public let level: LogLevel
    
    /// By default false, sets if this entry is a snapshot from a class
    ///
    /// Snapshots represent a codable class instance helpful for debugging classes that hold
    /// state across the app lifecycle
    public var isSnapshot: Bool = false
    
    /// Source file name providing debugging location identification and source code tracking.
    ///
    /// This string property contains the source file name for debugging location tracking,
    /// enabling precise source identification, code location analysis, and debugging
    /// assistance for comprehensive troubleshooting and development workflows.
    public let file: String
    
    /// Source function name providing debugging context and execution location identification.
    ///
    /// This string property contains the source function name for debugging context tracking,
    /// enabling function-specific analysis, execution context identification, and debugging
    /// coordination for comprehensive troubleshooting and development workflows.
    public let function: String
    
    /// Source line number providing precise debugging location and code position identification.
    ///
    /// This integer property contains the exact source line number for precise debugging location,
    /// enabling exact code position identification, detailed source tracking, and precise
    /// debugging assistance for comprehensive troubleshooting and development workflows.
    public let line: Int
    
    /// Temporal timestamp providing chronological coordination and log timing information.
    ///
    /// This Date property provides temporal information for chronological log analysis,
    /// enabling time-based log coordination, temporal debugging, and chronological
    /// monitoring for comprehensive logging and system analysis workflows.
    public let timestamp: Date
}
